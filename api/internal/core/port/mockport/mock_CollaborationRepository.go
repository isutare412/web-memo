// Code generated by mockery v2.46.1. DO NOT EDIT.

package mockport

import (
	context "context"

	ent "github.com/isutare412/web-memo/api/internal/core/ent"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockCollaborationRepository is an autogenerated mock type for the CollaborationRepository type
type MockCollaborationRepository struct {
	mock.Mock
}

type MockCollaborationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollaborationRepository) EXPECT() *MockCollaborationRepository_Expecter {
	return &MockCollaborationRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, memoID, userID
func (_m *MockCollaborationRepository) Create(ctx context.Context, memoID uuid.UUID, userID uuid.UUID) (*ent.Collaboration, error) {
	ret := _m.Called(ctx, memoID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *ent.Collaboration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*ent.Collaboration, error)); ok {
		return rf(ctx, memoID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *ent.Collaboration); ok {
		r0 = rf(ctx, memoID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Collaboration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, memoID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollaborationRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCollaborationRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - memoID uuid.UUID
//   - userID uuid.UUID
func (_e *MockCollaborationRepository_Expecter) Create(ctx interface{}, memoID interface{}, userID interface{}) *MockCollaborationRepository_Create_Call {
	return &MockCollaborationRepository_Create_Call{Call: _e.mock.On("Create", ctx, memoID, userID)}
}

func (_c *MockCollaborationRepository_Create_Call) Run(run func(ctx context.Context, memoID uuid.UUID, userID uuid.UUID)) *MockCollaborationRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockCollaborationRepository_Create_Call) Return(_a0 *ent.Collaboration, _a1 error) *MockCollaborationRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollaborationRepository_Create_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*ent.Collaboration, error)) *MockCollaborationRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, memoID, userID
func (_m *MockCollaborationRepository) Delete(ctx context.Context, memoID uuid.UUID, userID uuid.UUID) error {
	ret := _m.Called(ctx, memoID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, memoID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCollaborationRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCollaborationRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - memoID uuid.UUID
//   - userID uuid.UUID
func (_e *MockCollaborationRepository_Expecter) Delete(ctx interface{}, memoID interface{}, userID interface{}) *MockCollaborationRepository_Delete_Call {
	return &MockCollaborationRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, memoID, userID)}
}

func (_c *MockCollaborationRepository_Delete_Call) Run(run func(ctx context.Context, memoID uuid.UUID, userID uuid.UUID)) *MockCollaborationRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockCollaborationRepository_Delete_Call) Return(_a0 error) *MockCollaborationRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollaborationRepository_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockCollaborationRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllByMemoID provides a mock function with given fields: ctx, memoID
func (_m *MockCollaborationRepository) DeleteAllByMemoID(ctx context.Context, memoID uuid.UUID) (int, error) {
	ret := _m.Called(ctx, memoID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllByMemoID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int, error)); ok {
		return rf(ctx, memoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int); ok {
		r0 = rf(ctx, memoID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, memoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollaborationRepository_DeleteAllByMemoID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllByMemoID'
type MockCollaborationRepository_DeleteAllByMemoID_Call struct {
	*mock.Call
}

// DeleteAllByMemoID is a helper method to define mock.On call
//   - ctx context.Context
//   - memoID uuid.UUID
func (_e *MockCollaborationRepository_Expecter) DeleteAllByMemoID(ctx interface{}, memoID interface{}) *MockCollaborationRepository_DeleteAllByMemoID_Call {
	return &MockCollaborationRepository_DeleteAllByMemoID_Call{Call: _e.mock.On("DeleteAllByMemoID", ctx, memoID)}
}

func (_c *MockCollaborationRepository_DeleteAllByMemoID_Call) Run(run func(ctx context.Context, memoID uuid.UUID)) *MockCollaborationRepository_DeleteAllByMemoID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockCollaborationRepository_DeleteAllByMemoID_Call) Return(count int, err error) *MockCollaborationRepository_DeleteAllByMemoID_Call {
	_c.Call.Return(count, err)
	return _c
}

func (_c *MockCollaborationRepository_DeleteAllByMemoID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (int, error)) *MockCollaborationRepository_DeleteAllByMemoID_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, memoID, userID
func (_m *MockCollaborationRepository) Find(ctx context.Context, memoID uuid.UUID, userID uuid.UUID) (*ent.Collaboration, error) {
	ret := _m.Called(ctx, memoID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *ent.Collaboration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*ent.Collaboration, error)); ok {
		return rf(ctx, memoID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *ent.Collaboration); ok {
		r0 = rf(ctx, memoID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Collaboration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, memoID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollaborationRepository_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockCollaborationRepository_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - memoID uuid.UUID
//   - userID uuid.UUID
func (_e *MockCollaborationRepository_Expecter) Find(ctx interface{}, memoID interface{}, userID interface{}) *MockCollaborationRepository_Find_Call {
	return &MockCollaborationRepository_Find_Call{Call: _e.mock.On("Find", ctx, memoID, userID)}
}

func (_c *MockCollaborationRepository_Find_Call) Run(run func(ctx context.Context, memoID uuid.UUID, userID uuid.UUID)) *MockCollaborationRepository_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockCollaborationRepository_Find_Call) Return(_a0 *ent.Collaboration, _a1 error) *MockCollaborationRepository_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollaborationRepository_Find_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*ent.Collaboration, error)) *MockCollaborationRepository_Find_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateApprovedStatus provides a mock function with given fields: ctx, memoID, userID, approve
func (_m *MockCollaborationRepository) UpdateApprovedStatus(ctx context.Context, memoID uuid.UUID, userID uuid.UUID, approve bool) (*ent.Collaboration, error) {
	ret := _m.Called(ctx, memoID, userID, approve)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApprovedStatus")
	}

	var r0 *ent.Collaboration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, bool) (*ent.Collaboration, error)); ok {
		return rf(ctx, memoID, userID, approve)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, bool) *ent.Collaboration); ok {
		r0 = rf(ctx, memoID, userID, approve)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Collaboration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, bool) error); ok {
		r1 = rf(ctx, memoID, userID, approve)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollaborationRepository_UpdateApprovedStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateApprovedStatus'
type MockCollaborationRepository_UpdateApprovedStatus_Call struct {
	*mock.Call
}

// UpdateApprovedStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - memoID uuid.UUID
//   - userID uuid.UUID
//   - approve bool
func (_e *MockCollaborationRepository_Expecter) UpdateApprovedStatus(ctx interface{}, memoID interface{}, userID interface{}, approve interface{}) *MockCollaborationRepository_UpdateApprovedStatus_Call {
	return &MockCollaborationRepository_UpdateApprovedStatus_Call{Call: _e.mock.On("UpdateApprovedStatus", ctx, memoID, userID, approve)}
}

func (_c *MockCollaborationRepository_UpdateApprovedStatus_Call) Run(run func(ctx context.Context, memoID uuid.UUID, userID uuid.UUID, approve bool)) *MockCollaborationRepository_UpdateApprovedStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(bool))
	})
	return _c
}

func (_c *MockCollaborationRepository_UpdateApprovedStatus_Call) Return(_a0 *ent.Collaboration, _a1 error) *MockCollaborationRepository_UpdateApprovedStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollaborationRepository_UpdateApprovedStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, bool) (*ent.Collaboration, error)) *MockCollaborationRepository_UpdateApprovedStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCollaborationRepository creates a new instance of MockCollaborationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollaborationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollaborationRepository {
	mock := &MockCollaborationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
