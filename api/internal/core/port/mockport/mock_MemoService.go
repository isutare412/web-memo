// Code generated by mockery v2.46.1. DO NOT EDIT.

package mockport

import (
	context "context"

	ent "github.com/isutare412/web-memo/api/internal/core/ent"
	mock "github.com/stretchr/testify/mock"

	model "github.com/isutare412/web-memo/api/internal/core/model"

	uuid "github.com/google/uuid"
)

// MockMemoService is an autogenerated mock type for the MemoService type
type MockMemoService struct {
	mock.Mock
}

type MockMemoService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMemoService) EXPECT() *MockMemoService_Expecter {
	return &MockMemoService_Expecter{mock: &_m.Mock}
}

// AuthorizeCollaborator provides a mock function with given fields: ctx, memoID, collaboratorID, approve, requester
func (_m *MockMemoService) AuthorizeCollaborator(ctx context.Context, memoID uuid.UUID, collaboratorID uuid.UUID, approve bool, requester *model.AppIDToken) error {
	ret := _m.Called(ctx, memoID, collaboratorID, approve, requester)

	if len(ret) == 0 {
		panic("no return value specified for AuthorizeCollaborator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, bool, *model.AppIDToken) error); ok {
		r0 = rf(ctx, memoID, collaboratorID, approve, requester)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMemoService_AuthorizeCollaborator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthorizeCollaborator'
type MockMemoService_AuthorizeCollaborator_Call struct {
	*mock.Call
}

// AuthorizeCollaborator is a helper method to define mock.On call
//   - ctx context.Context
//   - memoID uuid.UUID
//   - collaboratorID uuid.UUID
//   - approve bool
//   - requester *model.AppIDToken
func (_e *MockMemoService_Expecter) AuthorizeCollaborator(ctx interface{}, memoID interface{}, collaboratorID interface{}, approve interface{}, requester interface{}) *MockMemoService_AuthorizeCollaborator_Call {
	return &MockMemoService_AuthorizeCollaborator_Call{Call: _e.mock.On("AuthorizeCollaborator", ctx, memoID, collaboratorID, approve, requester)}
}

func (_c *MockMemoService_AuthorizeCollaborator_Call) Run(run func(ctx context.Context, memoID uuid.UUID, collaboratorID uuid.UUID, approve bool, requester *model.AppIDToken)) *MockMemoService_AuthorizeCollaborator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(bool), args[4].(*model.AppIDToken))
	})
	return _c
}

func (_c *MockMemoService_AuthorizeCollaborator_Call) Return(_a0 error) *MockMemoService_AuthorizeCollaborator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMemoService_AuthorizeCollaborator_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, bool, *model.AppIDToken) error) *MockMemoService_AuthorizeCollaborator_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMemo provides a mock function with given fields: ctx, memo, tagNames, userID
func (_m *MockMemoService) CreateMemo(ctx context.Context, memo *ent.Memo, tagNames []string, userID uuid.UUID) (*ent.Memo, error) {
	ret := _m.Called(ctx, memo, tagNames, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateMemo")
	}

	var r0 *ent.Memo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Memo, []string, uuid.UUID) (*ent.Memo, error)); ok {
		return rf(ctx, memo, tagNames, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Memo, []string, uuid.UUID) *ent.Memo); ok {
		r0 = rf(ctx, memo, tagNames, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Memo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Memo, []string, uuid.UUID) error); ok {
		r1 = rf(ctx, memo, tagNames, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMemoService_CreateMemo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMemo'
type MockMemoService_CreateMemo_Call struct {
	*mock.Call
}

// CreateMemo is a helper method to define mock.On call
//   - ctx context.Context
//   - memo *ent.Memo
//   - tagNames []string
//   - userID uuid.UUID
func (_e *MockMemoService_Expecter) CreateMemo(ctx interface{}, memo interface{}, tagNames interface{}, userID interface{}) *MockMemoService_CreateMemo_Call {
	return &MockMemoService_CreateMemo_Call{Call: _e.mock.On("CreateMemo", ctx, memo, tagNames, userID)}
}

func (_c *MockMemoService_CreateMemo_Call) Run(run func(ctx context.Context, memo *ent.Memo, tagNames []string, userID uuid.UUID)) *MockMemoService_CreateMemo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Memo), args[2].([]string), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockMemoService_CreateMemo_Call) Return(_a0 *ent.Memo, _a1 error) *MockMemoService_CreateMemo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMemoService_CreateMemo_Call) RunAndReturn(run func(context.Context, *ent.Memo, []string, uuid.UUID) (*ent.Memo, error)) *MockMemoService_CreateMemo_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCollaborator provides a mock function with given fields: ctx, memoID, collaboratorID, requester
func (_m *MockMemoService) DeleteCollaborator(ctx context.Context, memoID uuid.UUID, collaboratorID uuid.UUID, requester *model.AppIDToken) error {
	ret := _m.Called(ctx, memoID, collaboratorID, requester)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCollaborator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, *model.AppIDToken) error); ok {
		r0 = rf(ctx, memoID, collaboratorID, requester)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMemoService_DeleteCollaborator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCollaborator'
type MockMemoService_DeleteCollaborator_Call struct {
	*mock.Call
}

// DeleteCollaborator is a helper method to define mock.On call
//   - ctx context.Context
//   - memoID uuid.UUID
//   - collaboratorID uuid.UUID
//   - requester *model.AppIDToken
func (_e *MockMemoService_Expecter) DeleteCollaborator(ctx interface{}, memoID interface{}, collaboratorID interface{}, requester interface{}) *MockMemoService_DeleteCollaborator_Call {
	return &MockMemoService_DeleteCollaborator_Call{Call: _e.mock.On("DeleteCollaborator", ctx, memoID, collaboratorID, requester)}
}

func (_c *MockMemoService_DeleteCollaborator_Call) Run(run func(ctx context.Context, memoID uuid.UUID, collaboratorID uuid.UUID, requester *model.AppIDToken)) *MockMemoService_DeleteCollaborator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(*model.AppIDToken))
	})
	return _c
}

func (_c *MockMemoService_DeleteCollaborator_Call) Return(_a0 error) *MockMemoService_DeleteCollaborator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMemoService_DeleteCollaborator_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, *model.AppIDToken) error) *MockMemoService_DeleteCollaborator_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMemo provides a mock function with given fields: ctx, memoID, requester
func (_m *MockMemoService) DeleteMemo(ctx context.Context, memoID uuid.UUID, requester *model.AppIDToken) error {
	ret := _m.Called(ctx, memoID, requester)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMemo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *model.AppIDToken) error); ok {
		r0 = rf(ctx, memoID, requester)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMemoService_DeleteMemo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMemo'
type MockMemoService_DeleteMemo_Call struct {
	*mock.Call
}

// DeleteMemo is a helper method to define mock.On call
//   - ctx context.Context
//   - memoID uuid.UUID
//   - requester *model.AppIDToken
func (_e *MockMemoService_Expecter) DeleteMemo(ctx interface{}, memoID interface{}, requester interface{}) *MockMemoService_DeleteMemo_Call {
	return &MockMemoService_DeleteMemo_Call{Call: _e.mock.On("DeleteMemo", ctx, memoID, requester)}
}

func (_c *MockMemoService_DeleteMemo_Call) Run(run func(ctx context.Context, memoID uuid.UUID, requester *model.AppIDToken)) *MockMemoService_DeleteMemo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*model.AppIDToken))
	})
	return _c
}

func (_c *MockMemoService_DeleteMemo_Call) Return(_a0 error) *MockMemoService_DeleteMemo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMemoService_DeleteMemo_Call) RunAndReturn(run func(context.Context, uuid.UUID, *model.AppIDToken) error) *MockMemoService_DeleteMemo_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrphanTags provides a mock function with given fields: _a0
func (_m *MockMemoService) DeleteOrphanTags(_a0 context.Context) (int, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrphanTags")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMemoService_DeleteOrphanTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrphanTags'
type MockMemoService_DeleteOrphanTags_Call struct {
	*mock.Call
}

// DeleteOrphanTags is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockMemoService_Expecter) DeleteOrphanTags(_a0 interface{}) *MockMemoService_DeleteOrphanTags_Call {
	return &MockMemoService_DeleteOrphanTags_Call{Call: _e.mock.On("DeleteOrphanTags", _a0)}
}

func (_c *MockMemoService_DeleteOrphanTags_Call) Run(run func(_a0 context.Context)) *MockMemoService_DeleteOrphanTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMemoService_DeleteOrphanTags_Call) Return(count int, err error) *MockMemoService_DeleteOrphanTags_Call {
	_c.Call.Return(count, err)
	return _c
}

func (_c *MockMemoService_DeleteOrphanTags_Call) RunAndReturn(run func(context.Context) (int, error)) *MockMemoService_DeleteOrphanTags_Call {
	_c.Call.Return(run)
	return _c
}

// GetMemo provides a mock function with given fields: ctx, memoID, requester
func (_m *MockMemoService) GetMemo(ctx context.Context, memoID uuid.UUID, requester *model.AppIDToken) (*ent.Memo, error) {
	ret := _m.Called(ctx, memoID, requester)

	if len(ret) == 0 {
		panic("no return value specified for GetMemo")
	}

	var r0 *ent.Memo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *model.AppIDToken) (*ent.Memo, error)); ok {
		return rf(ctx, memoID, requester)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *model.AppIDToken) *ent.Memo); ok {
		r0 = rf(ctx, memoID, requester)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Memo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *model.AppIDToken) error); ok {
		r1 = rf(ctx, memoID, requester)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMemoService_GetMemo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMemo'
type MockMemoService_GetMemo_Call struct {
	*mock.Call
}

// GetMemo is a helper method to define mock.On call
//   - ctx context.Context
//   - memoID uuid.UUID
//   - requester *model.AppIDToken
func (_e *MockMemoService_Expecter) GetMemo(ctx interface{}, memoID interface{}, requester interface{}) *MockMemoService_GetMemo_Call {
	return &MockMemoService_GetMemo_Call{Call: _e.mock.On("GetMemo", ctx, memoID, requester)}
}

func (_c *MockMemoService_GetMemo_Call) Run(run func(ctx context.Context, memoID uuid.UUID, requester *model.AppIDToken)) *MockMemoService_GetMemo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*model.AppIDToken))
	})
	return _c
}

func (_c *MockMemoService_GetMemo_Call) Return(_a0 *ent.Memo, _a1 error) *MockMemoService_GetMemo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMemoService_GetMemo_Call) RunAndReturn(run func(context.Context, uuid.UUID, *model.AppIDToken) (*ent.Memo, error)) *MockMemoService_GetMemo_Call {
	_c.Call.Return(run)
	return _c
}

// ListCollaborators provides a mock function with given fields: ctx, memoID, requester
func (_m *MockMemoService) ListCollaborators(ctx context.Context, memoID uuid.UUID, requester *model.AppIDToken) (*model.ListCollaboratorsResponse, error) {
	ret := _m.Called(ctx, memoID, requester)

	if len(ret) == 0 {
		panic("no return value specified for ListCollaborators")
	}

	var r0 *model.ListCollaboratorsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *model.AppIDToken) (*model.ListCollaboratorsResponse, error)); ok {
		return rf(ctx, memoID, requester)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *model.AppIDToken) *model.ListCollaboratorsResponse); ok {
		r0 = rf(ctx, memoID, requester)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ListCollaboratorsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *model.AppIDToken) error); ok {
		r1 = rf(ctx, memoID, requester)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMemoService_ListCollaborators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCollaborators'
type MockMemoService_ListCollaborators_Call struct {
	*mock.Call
}

// ListCollaborators is a helper method to define mock.On call
//   - ctx context.Context
//   - memoID uuid.UUID
//   - requester *model.AppIDToken
func (_e *MockMemoService_Expecter) ListCollaborators(ctx interface{}, memoID interface{}, requester interface{}) *MockMemoService_ListCollaborators_Call {
	return &MockMemoService_ListCollaborators_Call{Call: _e.mock.On("ListCollaborators", ctx, memoID, requester)}
}

func (_c *MockMemoService_ListCollaborators_Call) Run(run func(ctx context.Context, memoID uuid.UUID, requester *model.AppIDToken)) *MockMemoService_ListCollaborators_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*model.AppIDToken))
	})
	return _c
}

func (_c *MockMemoService_ListCollaborators_Call) Return(_a0 *model.ListCollaboratorsResponse, _a1 error) *MockMemoService_ListCollaborators_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMemoService_ListCollaborators_Call) RunAndReturn(run func(context.Context, uuid.UUID, *model.AppIDToken) (*model.ListCollaboratorsResponse, error)) *MockMemoService_ListCollaborators_Call {
	_c.Call.Return(run)
	return _c
}

// ListMemos provides a mock function with given fields: ctx, userID, tags, sortParams, pageParams
func (_m *MockMemoService) ListMemos(ctx context.Context, userID uuid.UUID, tags []string, sortParams model.MemoSortParams, pageParams model.PaginationParams) ([]*ent.Memo, int, error) {
	ret := _m.Called(ctx, userID, tags, sortParams, pageParams)

	if len(ret) == 0 {
		panic("no return value specified for ListMemos")
	}

	var r0 []*ent.Memo
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []string, model.MemoSortParams, model.PaginationParams) ([]*ent.Memo, int, error)); ok {
		return rf(ctx, userID, tags, sortParams, pageParams)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []string, model.MemoSortParams, model.PaginationParams) []*ent.Memo); ok {
		r0 = rf(ctx, userID, tags, sortParams, pageParams)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Memo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []string, model.MemoSortParams, model.PaginationParams) int); ok {
		r1 = rf(ctx, userID, tags, sortParams, pageParams)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, []string, model.MemoSortParams, model.PaginationParams) error); ok {
		r2 = rf(ctx, userID, tags, sortParams, pageParams)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMemoService_ListMemos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMemos'
type MockMemoService_ListMemos_Call struct {
	*mock.Call
}

// ListMemos is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - tags []string
//   - sortParams model.MemoSortParams
//   - pageParams model.PaginationParams
func (_e *MockMemoService_Expecter) ListMemos(ctx interface{}, userID interface{}, tags interface{}, sortParams interface{}, pageParams interface{}) *MockMemoService_ListMemos_Call {
	return &MockMemoService_ListMemos_Call{Call: _e.mock.On("ListMemos", ctx, userID, tags, sortParams, pageParams)}
}

func (_c *MockMemoService_ListMemos_Call) Run(run func(ctx context.Context, userID uuid.UUID, tags []string, sortParams model.MemoSortParams, pageParams model.PaginationParams)) *MockMemoService_ListMemos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].([]string), args[3].(model.MemoSortParams), args[4].(model.PaginationParams))
	})
	return _c
}

func (_c *MockMemoService_ListMemos_Call) Return(memos []*ent.Memo, totalCount int, err error) *MockMemoService_ListMemos_Call {
	_c.Call.Return(memos, totalCount, err)
	return _c
}

func (_c *MockMemoService_ListMemos_Call) RunAndReturn(run func(context.Context, uuid.UUID, []string, model.MemoSortParams, model.PaginationParams) ([]*ent.Memo, int, error)) *MockMemoService_ListMemos_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubscribers provides a mock function with given fields: ctx, memoID, requester
func (_m *MockMemoService) ListSubscribers(ctx context.Context, memoID uuid.UUID, requester *model.AppIDToken) (*model.ListSubscribersResponse, error) {
	ret := _m.Called(ctx, memoID, requester)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscribers")
	}

	var r0 *model.ListSubscribersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *model.AppIDToken) (*model.ListSubscribersResponse, error)); ok {
		return rf(ctx, memoID, requester)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *model.AppIDToken) *model.ListSubscribersResponse); ok {
		r0 = rf(ctx, memoID, requester)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ListSubscribersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *model.AppIDToken) error); ok {
		r1 = rf(ctx, memoID, requester)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMemoService_ListSubscribers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubscribers'
type MockMemoService_ListSubscribers_Call struct {
	*mock.Call
}

// ListSubscribers is a helper method to define mock.On call
//   - ctx context.Context
//   - memoID uuid.UUID
//   - requester *model.AppIDToken
func (_e *MockMemoService_Expecter) ListSubscribers(ctx interface{}, memoID interface{}, requester interface{}) *MockMemoService_ListSubscribers_Call {
	return &MockMemoService_ListSubscribers_Call{Call: _e.mock.On("ListSubscribers", ctx, memoID, requester)}
}

func (_c *MockMemoService_ListSubscribers_Call) Run(run func(ctx context.Context, memoID uuid.UUID, requester *model.AppIDToken)) *MockMemoService_ListSubscribers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*model.AppIDToken))
	})
	return _c
}

func (_c *MockMemoService_ListSubscribers_Call) Return(_a0 *model.ListSubscribersResponse, _a1 error) *MockMemoService_ListSubscribers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMemoService_ListSubscribers_Call) RunAndReturn(run func(context.Context, uuid.UUID, *model.AppIDToken) (*model.ListSubscribersResponse, error)) *MockMemoService_ListSubscribers_Call {
	_c.Call.Return(run)
	return _c
}

// ListTags provides a mock function with given fields: ctx, memoID, requester
func (_m *MockMemoService) ListTags(ctx context.Context, memoID uuid.UUID, requester *model.AppIDToken) ([]*ent.Tag, error) {
	ret := _m.Called(ctx, memoID, requester)

	if len(ret) == 0 {
		panic("no return value specified for ListTags")
	}

	var r0 []*ent.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *model.AppIDToken) ([]*ent.Tag, error)); ok {
		return rf(ctx, memoID, requester)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *model.AppIDToken) []*ent.Tag); ok {
		r0 = rf(ctx, memoID, requester)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *model.AppIDToken) error); ok {
		r1 = rf(ctx, memoID, requester)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMemoService_ListTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTags'
type MockMemoService_ListTags_Call struct {
	*mock.Call
}

// ListTags is a helper method to define mock.On call
//   - ctx context.Context
//   - memoID uuid.UUID
//   - requester *model.AppIDToken
func (_e *MockMemoService_Expecter) ListTags(ctx interface{}, memoID interface{}, requester interface{}) *MockMemoService_ListTags_Call {
	return &MockMemoService_ListTags_Call{Call: _e.mock.On("ListTags", ctx, memoID, requester)}
}

func (_c *MockMemoService_ListTags_Call) Run(run func(ctx context.Context, memoID uuid.UUID, requester *model.AppIDToken)) *MockMemoService_ListTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*model.AppIDToken))
	})
	return _c
}

func (_c *MockMemoService_ListTags_Call) Return(_a0 []*ent.Tag, _a1 error) *MockMemoService_ListTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMemoService_ListTags_Call) RunAndReturn(run func(context.Context, uuid.UUID, *model.AppIDToken) ([]*ent.Tag, error)) *MockMemoService_ListTags_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterCollaborator provides a mock function with given fields: ctx, memoID, requester
func (_m *MockMemoService) RegisterCollaborator(ctx context.Context, memoID uuid.UUID, requester *model.AppIDToken) error {
	ret := _m.Called(ctx, memoID, requester)

	if len(ret) == 0 {
		panic("no return value specified for RegisterCollaborator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *model.AppIDToken) error); ok {
		r0 = rf(ctx, memoID, requester)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMemoService_RegisterCollaborator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterCollaborator'
type MockMemoService_RegisterCollaborator_Call struct {
	*mock.Call
}

// RegisterCollaborator is a helper method to define mock.On call
//   - ctx context.Context
//   - memoID uuid.UUID
//   - requester *model.AppIDToken
func (_e *MockMemoService_Expecter) RegisterCollaborator(ctx interface{}, memoID interface{}, requester interface{}) *MockMemoService_RegisterCollaborator_Call {
	return &MockMemoService_RegisterCollaborator_Call{Call: _e.mock.On("RegisterCollaborator", ctx, memoID, requester)}
}

func (_c *MockMemoService_RegisterCollaborator_Call) Run(run func(ctx context.Context, memoID uuid.UUID, requester *model.AppIDToken)) *MockMemoService_RegisterCollaborator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*model.AppIDToken))
	})
	return _c
}

func (_c *MockMemoService_RegisterCollaborator_Call) Return(_a0 error) *MockMemoService_RegisterCollaborator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMemoService_RegisterCollaborator_Call) RunAndReturn(run func(context.Context, uuid.UUID, *model.AppIDToken) error) *MockMemoService_RegisterCollaborator_Call {
	_c.Call.Return(run)
	return _c
}

// ReplaceTags provides a mock function with given fields: ctx, memoID, tagNames, requester
func (_m *MockMemoService) ReplaceTags(ctx context.Context, memoID uuid.UUID, tagNames []string, requester *model.AppIDToken) ([]*ent.Tag, error) {
	ret := _m.Called(ctx, memoID, tagNames, requester)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceTags")
	}

	var r0 []*ent.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []string, *model.AppIDToken) ([]*ent.Tag, error)); ok {
		return rf(ctx, memoID, tagNames, requester)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []string, *model.AppIDToken) []*ent.Tag); ok {
		r0 = rf(ctx, memoID, tagNames, requester)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []string, *model.AppIDToken) error); ok {
		r1 = rf(ctx, memoID, tagNames, requester)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMemoService_ReplaceTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReplaceTags'
type MockMemoService_ReplaceTags_Call struct {
	*mock.Call
}

// ReplaceTags is a helper method to define mock.On call
//   - ctx context.Context
//   - memoID uuid.UUID
//   - tagNames []string
//   - requester *model.AppIDToken
func (_e *MockMemoService_Expecter) ReplaceTags(ctx interface{}, memoID interface{}, tagNames interface{}, requester interface{}) *MockMemoService_ReplaceTags_Call {
	return &MockMemoService_ReplaceTags_Call{Call: _e.mock.On("ReplaceTags", ctx, memoID, tagNames, requester)}
}

func (_c *MockMemoService_ReplaceTags_Call) Run(run func(ctx context.Context, memoID uuid.UUID, tagNames []string, requester *model.AppIDToken)) *MockMemoService_ReplaceTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].([]string), args[3].(*model.AppIDToken))
	})
	return _c
}

func (_c *MockMemoService_ReplaceTags_Call) Return(_a0 []*ent.Tag, _a1 error) *MockMemoService_ReplaceTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMemoService_ReplaceTags_Call) RunAndReturn(run func(context.Context, uuid.UUID, []string, *model.AppIDToken) ([]*ent.Tag, error)) *MockMemoService_ReplaceTags_Call {
	_c.Call.Return(run)
	return _c
}

// SearchTags provides a mock function with given fields: ctx, keyword, requester
func (_m *MockMemoService) SearchTags(ctx context.Context, keyword string, requester *model.AppIDToken) ([]*ent.Tag, error) {
	ret := _m.Called(ctx, keyword, requester)

	if len(ret) == 0 {
		panic("no return value specified for SearchTags")
	}

	var r0 []*ent.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.AppIDToken) ([]*ent.Tag, error)); ok {
		return rf(ctx, keyword, requester)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.AppIDToken) []*ent.Tag); ok {
		r0 = rf(ctx, keyword, requester)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *model.AppIDToken) error); ok {
		r1 = rf(ctx, keyword, requester)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMemoService_SearchTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchTags'
type MockMemoService_SearchTags_Call struct {
	*mock.Call
}

// SearchTags is a helper method to define mock.On call
//   - ctx context.Context
//   - keyword string
//   - requester *model.AppIDToken
func (_e *MockMemoService_Expecter) SearchTags(ctx interface{}, keyword interface{}, requester interface{}) *MockMemoService_SearchTags_Call {
	return &MockMemoService_SearchTags_Call{Call: _e.mock.On("SearchTags", ctx, keyword, requester)}
}

func (_c *MockMemoService_SearchTags_Call) Run(run func(ctx context.Context, keyword string, requester *model.AppIDToken)) *MockMemoService_SearchTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*model.AppIDToken))
	})
	return _c
}

func (_c *MockMemoService_SearchTags_Call) Return(_a0 []*ent.Tag, _a1 error) *MockMemoService_SearchTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMemoService_SearchTags_Call) RunAndReturn(run func(context.Context, string, *model.AppIDToken) ([]*ent.Tag, error)) *MockMemoService_SearchTags_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeMemo provides a mock function with given fields: ctx, memoID, requester
func (_m *MockMemoService) SubscribeMemo(ctx context.Context, memoID uuid.UUID, requester *model.AppIDToken) error {
	ret := _m.Called(ctx, memoID, requester)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeMemo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *model.AppIDToken) error); ok {
		r0 = rf(ctx, memoID, requester)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMemoService_SubscribeMemo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeMemo'
type MockMemoService_SubscribeMemo_Call struct {
	*mock.Call
}

// SubscribeMemo is a helper method to define mock.On call
//   - ctx context.Context
//   - memoID uuid.UUID
//   - requester *model.AppIDToken
func (_e *MockMemoService_Expecter) SubscribeMemo(ctx interface{}, memoID interface{}, requester interface{}) *MockMemoService_SubscribeMemo_Call {
	return &MockMemoService_SubscribeMemo_Call{Call: _e.mock.On("SubscribeMemo", ctx, memoID, requester)}
}

func (_c *MockMemoService_SubscribeMemo_Call) Run(run func(ctx context.Context, memoID uuid.UUID, requester *model.AppIDToken)) *MockMemoService_SubscribeMemo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*model.AppIDToken))
	})
	return _c
}

func (_c *MockMemoService_SubscribeMemo_Call) Return(_a0 error) *MockMemoService_SubscribeMemo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMemoService_SubscribeMemo_Call) RunAndReturn(run func(context.Context, uuid.UUID, *model.AppIDToken) error) *MockMemoService_SubscribeMemo_Call {
	_c.Call.Return(run)
	return _c
}

// UnsubscribeMemo provides a mock function with given fields: ctx, memoID, requester
func (_m *MockMemoService) UnsubscribeMemo(ctx context.Context, memoID uuid.UUID, requester *model.AppIDToken) error {
	ret := _m.Called(ctx, memoID, requester)

	if len(ret) == 0 {
		panic("no return value specified for UnsubscribeMemo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *model.AppIDToken) error); ok {
		r0 = rf(ctx, memoID, requester)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMemoService_UnsubscribeMemo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsubscribeMemo'
type MockMemoService_UnsubscribeMemo_Call struct {
	*mock.Call
}

// UnsubscribeMemo is a helper method to define mock.On call
//   - ctx context.Context
//   - memoID uuid.UUID
//   - requester *model.AppIDToken
func (_e *MockMemoService_Expecter) UnsubscribeMemo(ctx interface{}, memoID interface{}, requester interface{}) *MockMemoService_UnsubscribeMemo_Call {
	return &MockMemoService_UnsubscribeMemo_Call{Call: _e.mock.On("UnsubscribeMemo", ctx, memoID, requester)}
}

func (_c *MockMemoService_UnsubscribeMemo_Call) Run(run func(ctx context.Context, memoID uuid.UUID, requester *model.AppIDToken)) *MockMemoService_UnsubscribeMemo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*model.AppIDToken))
	})
	return _c
}

func (_c *MockMemoService_UnsubscribeMemo_Call) Return(_a0 error) *MockMemoService_UnsubscribeMemo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMemoService_UnsubscribeMemo_Call) RunAndReturn(run func(context.Context, uuid.UUID, *model.AppIDToken) error) *MockMemoService_UnsubscribeMemo_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMemo provides a mock function with given fields: ctx, memo, tagNames, requester, isPinUpdateTime
func (_m *MockMemoService) UpdateMemo(ctx context.Context, memo *ent.Memo, tagNames []string, requester *model.AppIDToken, isPinUpdateTime bool) (*ent.Memo, error) {
	ret := _m.Called(ctx, memo, tagNames, requester, isPinUpdateTime)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMemo")
	}

	var r0 *ent.Memo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Memo, []string, *model.AppIDToken, bool) (*ent.Memo, error)); ok {
		return rf(ctx, memo, tagNames, requester, isPinUpdateTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Memo, []string, *model.AppIDToken, bool) *ent.Memo); ok {
		r0 = rf(ctx, memo, tagNames, requester, isPinUpdateTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Memo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.Memo, []string, *model.AppIDToken, bool) error); ok {
		r1 = rf(ctx, memo, tagNames, requester, isPinUpdateTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMemoService_UpdateMemo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMemo'
type MockMemoService_UpdateMemo_Call struct {
	*mock.Call
}

// UpdateMemo is a helper method to define mock.On call
//   - ctx context.Context
//   - memo *ent.Memo
//   - tagNames []string
//   - requester *model.AppIDToken
//   - isPinUpdateTime bool
func (_e *MockMemoService_Expecter) UpdateMemo(ctx interface{}, memo interface{}, tagNames interface{}, requester interface{}, isPinUpdateTime interface{}) *MockMemoService_UpdateMemo_Call {
	return &MockMemoService_UpdateMemo_Call{Call: _e.mock.On("UpdateMemo", ctx, memo, tagNames, requester, isPinUpdateTime)}
}

func (_c *MockMemoService_UpdateMemo_Call) Run(run func(ctx context.Context, memo *ent.Memo, tagNames []string, requester *model.AppIDToken, isPinUpdateTime bool)) *MockMemoService_UpdateMemo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.Memo), args[2].([]string), args[3].(*model.AppIDToken), args[4].(bool))
	})
	return _c
}

func (_c *MockMemoService_UpdateMemo_Call) Return(_a0 *ent.Memo, _a1 error) *MockMemoService_UpdateMemo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMemoService_UpdateMemo_Call) RunAndReturn(run func(context.Context, *ent.Memo, []string, *model.AppIDToken, bool) (*ent.Memo, error)) *MockMemoService_UpdateMemo_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMemoPublishedState provides a mock function with given fields: ctx, memoID, publish, requester
func (_m *MockMemoService) UpdateMemoPublishedState(ctx context.Context, memoID uuid.UUID, publish bool, requester *model.AppIDToken) (*ent.Memo, error) {
	ret := _m.Called(ctx, memoID, publish, requester)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMemoPublishedState")
	}

	var r0 *ent.Memo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool, *model.AppIDToken) (*ent.Memo, error)); ok {
		return rf(ctx, memoID, publish, requester)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, bool, *model.AppIDToken) *ent.Memo); ok {
		r0 = rf(ctx, memoID, publish, requester)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Memo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, bool, *model.AppIDToken) error); ok {
		r1 = rf(ctx, memoID, publish, requester)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMemoService_UpdateMemoPublishedState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMemoPublishedState'
type MockMemoService_UpdateMemoPublishedState_Call struct {
	*mock.Call
}

// UpdateMemoPublishedState is a helper method to define mock.On call
//   - ctx context.Context
//   - memoID uuid.UUID
//   - publish bool
//   - requester *model.AppIDToken
func (_e *MockMemoService_Expecter) UpdateMemoPublishedState(ctx interface{}, memoID interface{}, publish interface{}, requester interface{}) *MockMemoService_UpdateMemoPublishedState_Call {
	return &MockMemoService_UpdateMemoPublishedState_Call{Call: _e.mock.On("UpdateMemoPublishedState", ctx, memoID, publish, requester)}
}

func (_c *MockMemoService_UpdateMemoPublishedState_Call) Run(run func(ctx context.Context, memoID uuid.UUID, publish bool, requester *model.AppIDToken)) *MockMemoService_UpdateMemoPublishedState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(bool), args[3].(*model.AppIDToken))
	})
	return _c
}

func (_c *MockMemoService_UpdateMemoPublishedState_Call) Return(_a0 *ent.Memo, _a1 error) *MockMemoService_UpdateMemoPublishedState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMemoService_UpdateMemoPublishedState_Call) RunAndReturn(run func(context.Context, uuid.UUID, bool, *model.AppIDToken) (*ent.Memo, error)) *MockMemoService_UpdateMemoPublishedState_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMemoService creates a new instance of MockMemoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMemoService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMemoService {
	mock := &MockMemoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
