// Code generated by mockery v2.46.1. DO NOT EDIT.

package mockport

import (
	model "github.com/isutare412/web-memo/api/internal/core/model"
	mock "github.com/stretchr/testify/mock"
)

// MockJWTClient is an autogenerated mock type for the JWTClient type
type MockJWTClient struct {
	mock.Mock
}

type MockJWTClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJWTClient) EXPECT() *MockJWTClient_Expecter {
	return &MockJWTClient_Expecter{mock: &_m.Mock}
}

// ParseGoogleIDTokenUnverified provides a mock function with given fields: tokenString
func (_m *MockJWTClient) ParseGoogleIDTokenUnverified(tokenString string) (*model.GoogleIDToken, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ParseGoogleIDTokenUnverified")
	}

	var r0 *model.GoogleIDToken
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.GoogleIDToken, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *model.GoogleIDToken); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GoogleIDToken)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJWTClient_ParseGoogleIDTokenUnverified_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseGoogleIDTokenUnverified'
type MockJWTClient_ParseGoogleIDTokenUnverified_Call struct {
	*mock.Call
}

// ParseGoogleIDTokenUnverified is a helper method to define mock.On call
//   - tokenString string
func (_e *MockJWTClient_Expecter) ParseGoogleIDTokenUnverified(tokenString interface{}) *MockJWTClient_ParseGoogleIDTokenUnverified_Call {
	return &MockJWTClient_ParseGoogleIDTokenUnverified_Call{Call: _e.mock.On("ParseGoogleIDTokenUnverified", tokenString)}
}

func (_c *MockJWTClient_ParseGoogleIDTokenUnverified_Call) Run(run func(tokenString string)) *MockJWTClient_ParseGoogleIDTokenUnverified_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJWTClient_ParseGoogleIDTokenUnverified_Call) Return(_a0 *model.GoogleIDToken, _a1 error) *MockJWTClient_ParseGoogleIDTokenUnverified_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJWTClient_ParseGoogleIDTokenUnverified_Call) RunAndReturn(run func(string) (*model.GoogleIDToken, error)) *MockJWTClient_ParseGoogleIDTokenUnverified_Call {
	_c.Call.Return(run)
	return _c
}

// SignAppIDToken provides a mock function with given fields: _a0
func (_m *MockJWTClient) SignAppIDToken(_a0 *model.AppIDToken) (*model.AppIDToken, string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SignAppIDToken")
	}

	var r0 *model.AppIDToken
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(*model.AppIDToken) (*model.AppIDToken, string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.AppIDToken) *model.AppIDToken); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppIDToken)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.AppIDToken) string); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(*model.AppIDToken) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockJWTClient_SignAppIDToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignAppIDToken'
type MockJWTClient_SignAppIDToken_Call struct {
	*mock.Call
}

// SignAppIDToken is a helper method to define mock.On call
//   - _a0 *model.AppIDToken
func (_e *MockJWTClient_Expecter) SignAppIDToken(_a0 interface{}) *MockJWTClient_SignAppIDToken_Call {
	return &MockJWTClient_SignAppIDToken_Call{Call: _e.mock.On("SignAppIDToken", _a0)}
}

func (_c *MockJWTClient_SignAppIDToken_Call) Run(run func(_a0 *model.AppIDToken)) *MockJWTClient_SignAppIDToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.AppIDToken))
	})
	return _c
}

func (_c *MockJWTClient_SignAppIDToken_Call) Return(token *model.AppIDToken, tokenString string, err error) *MockJWTClient_SignAppIDToken_Call {
	_c.Call.Return(token, tokenString, err)
	return _c
}

func (_c *MockJWTClient_SignAppIDToken_Call) RunAndReturn(run func(*model.AppIDToken) (*model.AppIDToken, string, error)) *MockJWTClient_SignAppIDToken_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyAppIDToken provides a mock function with given fields: tokenString
func (_m *MockJWTClient) VerifyAppIDToken(tokenString string) (*model.AppIDToken, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for VerifyAppIDToken")
	}

	var r0 *model.AppIDToken
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.AppIDToken, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *model.AppIDToken); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppIDToken)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJWTClient_VerifyAppIDToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyAppIDToken'
type MockJWTClient_VerifyAppIDToken_Call struct {
	*mock.Call
}

// VerifyAppIDToken is a helper method to define mock.On call
//   - tokenString string
func (_e *MockJWTClient_Expecter) VerifyAppIDToken(tokenString interface{}) *MockJWTClient_VerifyAppIDToken_Call {
	return &MockJWTClient_VerifyAppIDToken_Call{Call: _e.mock.On("VerifyAppIDToken", tokenString)}
}

func (_c *MockJWTClient_VerifyAppIDToken_Call) Run(run func(tokenString string)) *MockJWTClient_VerifyAppIDToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockJWTClient_VerifyAppIDToken_Call) Return(_a0 *model.AppIDToken, _a1 error) *MockJWTClient_VerifyAppIDToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJWTClient_VerifyAppIDToken_Call) RunAndReturn(run func(string) (*model.AppIDToken, error)) *MockJWTClient_VerifyAppIDToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJWTClient creates a new instance of MockJWTClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJWTClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJWTClient {
	mock := &MockJWTClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
