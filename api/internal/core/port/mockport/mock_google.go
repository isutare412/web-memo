// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/google.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/google.go -destination=internal/core/port/mockport/mock_google.go -package=mockport
//
// Package mockport is a generated GoMock package.
package mockport

import (
	context "context"
	reflect "reflect"

	model "github.com/isutare412/web-memo/api/internal/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockGoogleClient is a mock of GoogleClient interface.
type MockGoogleClient struct {
	ctrl     *gomock.Controller
	recorder *MockGoogleClientMockRecorder
}

// MockGoogleClientMockRecorder is the mock recorder for MockGoogleClient.
type MockGoogleClientMockRecorder struct {
	mock *MockGoogleClient
}

// NewMockGoogleClient creates a new mock instance.
func NewMockGoogleClient(ctrl *gomock.Controller) *MockGoogleClient {
	mock := &MockGoogleClient{ctrl: ctrl}
	mock.recorder = &MockGoogleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoogleClient) EXPECT() *MockGoogleClientMockRecorder {
	return m.recorder
}

// ExchangeAuthCode mocks base method.
func (m *MockGoogleClient) ExchangeAuthCode(ctx context.Context, code, redirectURI string) (model.GoogleTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeAuthCode", ctx, code, redirectURI)
	ret0, _ := ret[0].(model.GoogleTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeAuthCode indicates an expected call of ExchangeAuthCode.
func (mr *MockGoogleClientMockRecorder) ExchangeAuthCode(ctx, code, redirectURI any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeAuthCode", reflect.TypeOf((*MockGoogleClient)(nil).ExchangeAuthCode), ctx, code, redirectURI)
}
