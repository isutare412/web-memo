// Code generated by mockery v2.46.1. DO NOT EDIT.

package mockport

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockTransactionManager is an autogenerated mock type for the TransactionManager type
type MockTransactionManager struct {
	mock.Mock
}

type MockTransactionManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactionManager) EXPECT() *MockTransactionManager_Expecter {
	return &MockTransactionManager_Expecter{mock: &_m.Mock}
}

// BeginTx provides a mock function with given fields: _a0
func (_m *MockTransactionManager) BeginTx(_a0 context.Context) (context.Context, func() error, func() error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 context.Context
	var r1 func() error
	var r2 func() error
	if rf, ok := ret.Get(0).(func(context.Context) (context.Context, func() error, func() error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) func() error); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func() error)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) func() error); ok {
		r2 = rf(_a0)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(func() error)
		}
	}

	return r0, r1, r2
}

// MockTransactionManager_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type MockTransactionManager_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockTransactionManager_Expecter) BeginTx(_a0 interface{}) *MockTransactionManager_BeginTx_Call {
	return &MockTransactionManager_BeginTx_Call{Call: _e.mock.On("BeginTx", _a0)}
}

func (_c *MockTransactionManager_BeginTx_Call) Run(run func(_a0 context.Context)) *MockTransactionManager_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTransactionManager_BeginTx_Call) Return(ctxWithTx context.Context, commit func() error, rollback func() error) *MockTransactionManager_BeginTx_Call {
	_c.Call.Return(ctxWithTx, commit, rollback)
	return _c
}

func (_c *MockTransactionManager_BeginTx_Call) RunAndReturn(run func(context.Context) (context.Context, func() error, func() error)) *MockTransactionManager_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// WithTx provides a mock function with given fields: _a0, _a1
func (_m *MockTransactionManager) WithTx(_a0 context.Context, _a1 func(context.Context) error) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactionManager_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type MockTransactionManager_WithTx_Call struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 func(context.Context) error
func (_e *MockTransactionManager_Expecter) WithTx(_a0 interface{}, _a1 interface{}) *MockTransactionManager_WithTx_Call {
	return &MockTransactionManager_WithTx_Call{Call: _e.mock.On("WithTx", _a0, _a1)}
}

func (_c *MockTransactionManager_WithTx_Call) Run(run func(_a0 context.Context, _a1 func(context.Context) error)) *MockTransactionManager_WithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *MockTransactionManager_WithTx_Call) Return(_a0 error) *MockTransactionManager_WithTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactionManager_WithTx_Call) RunAndReturn(run func(context.Context, func(context.Context) error) error) *MockTransactionManager_WithTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactionManager creates a new instance of MockTransactionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactionManager {
	mock := &MockTransactionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
