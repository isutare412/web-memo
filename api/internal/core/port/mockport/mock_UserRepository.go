// Code generated by mockery v2.46.1. DO NOT EDIT.

package mockport

import (
	context "context"

	ent "github.com/isutare412/web-memo/api/internal/core/ent"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// FindAllByCollaboratingMemoIDWithEdges provides a mock function with given fields: ctx, memoID
func (_m *MockUserRepository) FindAllByCollaboratingMemoIDWithEdges(ctx context.Context, memoID uuid.UUID) ([]*ent.User, error) {
	ret := _m.Called(ctx, memoID)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByCollaboratingMemoIDWithEdges")
	}

	var r0 []*ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*ent.User, error)); ok {
		return rf(ctx, memoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*ent.User); ok {
		r0 = rf(ctx, memoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, memoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_FindAllByCollaboratingMemoIDWithEdges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllByCollaboratingMemoIDWithEdges'
type MockUserRepository_FindAllByCollaboratingMemoIDWithEdges_Call struct {
	*mock.Call
}

// FindAllByCollaboratingMemoIDWithEdges is a helper method to define mock.On call
//   - ctx context.Context
//   - memoID uuid.UUID
func (_e *MockUserRepository_Expecter) FindAllByCollaboratingMemoIDWithEdges(ctx interface{}, memoID interface{}) *MockUserRepository_FindAllByCollaboratingMemoIDWithEdges_Call {
	return &MockUserRepository_FindAllByCollaboratingMemoIDWithEdges_Call{Call: _e.mock.On("FindAllByCollaboratingMemoIDWithEdges", ctx, memoID)}
}

func (_c *MockUserRepository_FindAllByCollaboratingMemoIDWithEdges_Call) Run(run func(ctx context.Context, memoID uuid.UUID)) *MockUserRepository_FindAllByCollaboratingMemoIDWithEdges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserRepository_FindAllByCollaboratingMemoIDWithEdges_Call) Return(_a0 []*ent.User, _a1 error) *MockUserRepository_FindAllByCollaboratingMemoIDWithEdges_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_FindAllByCollaboratingMemoIDWithEdges_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*ent.User, error)) *MockUserRepository_FindAllByCollaboratingMemoIDWithEdges_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllBySubscribingMemoID provides a mock function with given fields: ctx, memoID
func (_m *MockUserRepository) FindAllBySubscribingMemoID(ctx context.Context, memoID uuid.UUID) ([]*ent.User, error) {
	ret := _m.Called(ctx, memoID)

	if len(ret) == 0 {
		panic("no return value specified for FindAllBySubscribingMemoID")
	}

	var r0 []*ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*ent.User, error)); ok {
		return rf(ctx, memoID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*ent.User); ok {
		r0 = rf(ctx, memoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, memoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_FindAllBySubscribingMemoID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllBySubscribingMemoID'
type MockUserRepository_FindAllBySubscribingMemoID_Call struct {
	*mock.Call
}

// FindAllBySubscribingMemoID is a helper method to define mock.On call
//   - ctx context.Context
//   - memoID uuid.UUID
func (_e *MockUserRepository_Expecter) FindAllBySubscribingMemoID(ctx interface{}, memoID interface{}) *MockUserRepository_FindAllBySubscribingMemoID_Call {
	return &MockUserRepository_FindAllBySubscribingMemoID_Call{Call: _e.mock.On("FindAllBySubscribingMemoID", ctx, memoID)}
}

func (_c *MockUserRepository_FindAllBySubscribingMemoID_Call) Run(run func(ctx context.Context, memoID uuid.UUID)) *MockUserRepository_FindAllBySubscribingMemoID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserRepository_FindAllBySubscribingMemoID_Call) Return(_a0 []*ent.User, _a1 error) *MockUserRepository_FindAllBySubscribingMemoID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_FindAllBySubscribingMemoID_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*ent.User, error)) *MockUserRepository_FindAllBySubscribingMemoID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByEmail provides a mock function with given fields: ctx, email
func (_m *MockUserRepository) FindByEmail(ctx context.Context, email string) (*ent.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ent.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ent.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_FindByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByEmail'
type MockUserRepository_FindByEmail_Call struct {
	*mock.Call
}

// FindByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUserRepository_Expecter) FindByEmail(ctx interface{}, email interface{}) *MockUserRepository_FindByEmail_Call {
	return &MockUserRepository_FindByEmail_Call{Call: _e.mock.On("FindByEmail", ctx, email)}
}

func (_c *MockUserRepository_FindByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserRepository_FindByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepository_FindByEmail_Call) Return(_a0 *ent.User, _a1 error) *MockUserRepository_FindByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_FindByEmail_Call) RunAndReturn(run func(context.Context, string) (*ent.User, error)) *MockUserRepository_FindByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, userID
func (_m *MockUserRepository) FindByID(ctx context.Context, userID uuid.UUID) (*ent.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*ent.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *ent.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockUserRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockUserRepository_Expecter) FindByID(ctx interface{}, userID interface{}) *MockUserRepository_FindByID_Call {
	return &MockUserRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, userID)}
}

func (_c *MockUserRepository_FindByID_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockUserRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserRepository_FindByID_Call) Return(_a0 *ent.User, _a1 error) *MockUserRepository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_FindByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*ent.User, error)) *MockUserRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: _a0, _a1
func (_m *MockUserRepository) Upsert(_a0 context.Context, _a1 *ent.User) (*ent.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Upsert")
	}

	var r0 *ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.User) (*ent.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ent.User) *ent.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ent.User) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type MockUserRepository_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *ent.User
func (_e *MockUserRepository_Expecter) Upsert(_a0 interface{}, _a1 interface{}) *MockUserRepository_Upsert_Call {
	return &MockUserRepository_Upsert_Call{Call: _e.mock.On("Upsert", _a0, _a1)}
}

func (_c *MockUserRepository_Upsert_Call) Run(run func(_a0 context.Context, _a1 *ent.User)) *MockUserRepository_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ent.User))
	})
	return _c
}

func (_c *MockUserRepository_Upsert_Call) Return(_a0 *ent.User, _a1 error) *MockUserRepository_Upsert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_Upsert_Call) RunAndReturn(run func(context.Context, *ent.User) (*ent.User, error)) *MockUserRepository_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
