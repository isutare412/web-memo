// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/port/jwt.go
//
// Generated by this command:
//
//	mockgen -source=internal/core/port/jwt.go -destination=internal/core/port/mockport/mock_jwt.go -package=mockport
//
// Package mockport is a generated GoMock package.
package mockport

import (
	reflect "reflect"

	model "github.com/isutare412/web-memo/api/internal/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockJWTClient is a mock of JWTClient interface.
type MockJWTClient struct {
	ctrl     *gomock.Controller
	recorder *MockJWTClientMockRecorder
}

// MockJWTClientMockRecorder is the mock recorder for MockJWTClient.
type MockJWTClientMockRecorder struct {
	mock *MockJWTClient
}

// NewMockJWTClient creates a new mock instance.
func NewMockJWTClient(ctrl *gomock.Controller) *MockJWTClient {
	mock := &MockJWTClient{ctrl: ctrl}
	mock.recorder = &MockJWTClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTClient) EXPECT() *MockJWTClientMockRecorder {
	return m.recorder
}

// ParseGoogleIDTokenUnverified mocks base method.
func (m *MockJWTClient) ParseGoogleIDTokenUnverified(tokenString string) (*model.GoogleIDToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseGoogleIDTokenUnverified", tokenString)
	ret0, _ := ret[0].(*model.GoogleIDToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseGoogleIDTokenUnverified indicates an expected call of ParseGoogleIDTokenUnverified.
func (mr *MockJWTClientMockRecorder) ParseGoogleIDTokenUnverified(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseGoogleIDTokenUnverified", reflect.TypeOf((*MockJWTClient)(nil).ParseGoogleIDTokenUnverified), tokenString)
}

// SignAppIDToken mocks base method.
func (m *MockJWTClient) SignAppIDToken(arg0 *model.AppIDToken) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignAppIDToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignAppIDToken indicates an expected call of SignAppIDToken.
func (mr *MockJWTClientMockRecorder) SignAppIDToken(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignAppIDToken", reflect.TypeOf((*MockJWTClient)(nil).SignAppIDToken), arg0)
}

// VerifyAppIDTokenString mocks base method.
func (m *MockJWTClient) VerifyAppIDTokenString(tokenString string) (*model.AppIDToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAppIDTokenString", tokenString)
	ret0, _ := ret[0].(*model.AppIDToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAppIDTokenString indicates an expected call of VerifyAppIDTokenString.
func (mr *MockJWTClientMockRecorder) VerifyAppIDTokenString(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAppIDTokenString", reflect.TypeOf((*MockJWTClient)(nil).VerifyAppIDTokenString), tokenString)
}
