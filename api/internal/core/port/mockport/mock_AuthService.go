// Code generated by mockery v2.46.1. DO NOT EDIT.

package mockport

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	model "github.com/isutare412/web-memo/api/internal/core/model"
)

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

type MockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthService) EXPECT() *MockAuthService_Expecter {
	return &MockAuthService_Expecter{mock: &_m.Mock}
}

// FinishGoogleSignIn provides a mock function with given fields: _a0, _a1
func (_m *MockAuthService) FinishGoogleSignIn(_a0 context.Context, _a1 *http.Request) (string, string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FinishGoogleSignIn")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) (string, string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *http.Request) string); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *http.Request) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuthService_FinishGoogleSignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishGoogleSignIn'
type MockAuthService_FinishGoogleSignIn_Call struct {
	*mock.Call
}

// FinishGoogleSignIn is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *http.Request
func (_e *MockAuthService_Expecter) FinishGoogleSignIn(_a0 interface{}, _a1 interface{}) *MockAuthService_FinishGoogleSignIn_Call {
	return &MockAuthService_FinishGoogleSignIn_Call{Call: _e.mock.On("FinishGoogleSignIn", _a0, _a1)}
}

func (_c *MockAuthService_FinishGoogleSignIn_Call) Run(run func(_a0 context.Context, _a1 *http.Request)) *MockAuthService_FinishGoogleSignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockAuthService_FinishGoogleSignIn_Call) Return(redirectURL string, appToken string, err error) *MockAuthService_FinishGoogleSignIn_Call {
	_c.Call.Return(redirectURL, appToken, err)
	return _c
}

func (_c *MockAuthService_FinishGoogleSignIn_Call) RunAndReturn(run func(context.Context, *http.Request) (string, string, error)) *MockAuthService_FinishGoogleSignIn_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshAppIDToken provides a mock function with given fields: ctx, tokenString
func (_m *MockAuthService) RefreshAppIDToken(ctx context.Context, tokenString string) (*model.AppIDToken, string, error) {
	ret := _m.Called(ctx, tokenString)

	if len(ret) == 0 {
		panic("no return value specified for RefreshAppIDToken")
	}

	var r0 *model.AppIDToken
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.AppIDToken, string, error)); ok {
		return rf(ctx, tokenString)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.AppIDToken); ok {
		r0 = rf(ctx, tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppIDToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, tokenString)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, tokenString)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAuthService_RefreshAppIDToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshAppIDToken'
type MockAuthService_RefreshAppIDToken_Call struct {
	*mock.Call
}

// RefreshAppIDToken is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenString string
func (_e *MockAuthService_Expecter) RefreshAppIDToken(ctx interface{}, tokenString interface{}) *MockAuthService_RefreshAppIDToken_Call {
	return &MockAuthService_RefreshAppIDToken_Call{Call: _e.mock.On("RefreshAppIDToken", ctx, tokenString)}
}

func (_c *MockAuthService_RefreshAppIDToken_Call) Run(run func(ctx context.Context, tokenString string)) *MockAuthService_RefreshAppIDToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_RefreshAppIDToken_Call) Return(newToken *model.AppIDToken, newTokenString string, err error) *MockAuthService_RefreshAppIDToken_Call {
	_c.Call.Return(newToken, newTokenString, err)
	return _c
}

func (_c *MockAuthService_RefreshAppIDToken_Call) RunAndReturn(run func(context.Context, string) (*model.AppIDToken, string, error)) *MockAuthService_RefreshAppIDToken_Call {
	_c.Call.Return(run)
	return _c
}

// StartGoogleSignIn provides a mock function with given fields: _a0, _a1
func (_m *MockAuthService) StartGoogleSignIn(_a0 context.Context, _a1 *http.Request) (string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for StartGoogleSignIn")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *http.Request) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *http.Request) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_StartGoogleSignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartGoogleSignIn'
type MockAuthService_StartGoogleSignIn_Call struct {
	*mock.Call
}

// StartGoogleSignIn is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *http.Request
func (_e *MockAuthService_Expecter) StartGoogleSignIn(_a0 interface{}, _a1 interface{}) *MockAuthService_StartGoogleSignIn_Call {
	return &MockAuthService_StartGoogleSignIn_Call{Call: _e.mock.On("StartGoogleSignIn", _a0, _a1)}
}

func (_c *MockAuthService_StartGoogleSignIn_Call) Run(run func(_a0 context.Context, _a1 *http.Request)) *MockAuthService_StartGoogleSignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockAuthService_StartGoogleSignIn_Call) Return(redirectURL string, err error) *MockAuthService_StartGoogleSignIn_Call {
	_c.Call.Return(redirectURL, err)
	return _c
}

func (_c *MockAuthService_StartGoogleSignIn_Call) RunAndReturn(run func(context.Context, *http.Request) (string, error)) *MockAuthService_StartGoogleSignIn_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyAppIDToken provides a mock function with given fields: _a0
func (_m *MockAuthService) VerifyAppIDToken(_a0 string) (*model.AppIDToken, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for VerifyAppIDToken")
	}

	var r0 *model.AppIDToken
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.AppIDToken, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *model.AppIDToken); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppIDToken)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_VerifyAppIDToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyAppIDToken'
type MockAuthService_VerifyAppIDToken_Call struct {
	*mock.Call
}

// VerifyAppIDToken is a helper method to define mock.On call
//   - _a0 string
func (_e *MockAuthService_Expecter) VerifyAppIDToken(_a0 interface{}) *MockAuthService_VerifyAppIDToken_Call {
	return &MockAuthService_VerifyAppIDToken_Call{Call: _e.mock.On("VerifyAppIDToken", _a0)}
}

func (_c *MockAuthService_VerifyAppIDToken_Call) Run(run func(_a0 string)) *MockAuthService_VerifyAppIDToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthService_VerifyAppIDToken_Call) Return(_a0 *model.AppIDToken, _a1 error) *MockAuthService_VerifyAppIDToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_VerifyAppIDToken_Call) RunAndReturn(run func(string) (*model.AppIDToken, error)) *MockAuthService_VerifyAppIDToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
