// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/isutare412/web-memo/api/internal/core/ent/collaboration"
	"github.com/isutare412/web-memo/api/internal/core/ent/memo"
	"github.com/isutare412/web-memo/api/internal/core/ent/predicate"
	"github.com/isutare412/web-memo/api/internal/core/ent/user"
)

// CollaborationUpdate is the builder for updating Collaboration entities.
type CollaborationUpdate struct {
	config
	hooks    []Hook
	mutation *CollaborationMutation
}

// Where appends a list predicates to the CollaborationUpdate builder.
func (cu *CollaborationUpdate) Where(ps ...predicate.Collaboration) *CollaborationUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUserID sets the "user_id" field.
func (cu *CollaborationUpdate) SetUserID(u uuid.UUID) *CollaborationUpdate {
	cu.mutation.SetUserID(u)
	return cu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cu *CollaborationUpdate) SetNillableUserID(u *uuid.UUID) *CollaborationUpdate {
	if u != nil {
		cu.SetUserID(*u)
	}
	return cu
}

// SetMemoID sets the "memo_id" field.
func (cu *CollaborationUpdate) SetMemoID(u uuid.UUID) *CollaborationUpdate {
	cu.mutation.SetMemoID(u)
	return cu
}

// SetNillableMemoID sets the "memo_id" field if the given value is not nil.
func (cu *CollaborationUpdate) SetNillableMemoID(u *uuid.UUID) *CollaborationUpdate {
	if u != nil {
		cu.SetMemoID(*u)
	}
	return cu
}

// SetApproved sets the "approved" field.
func (cu *CollaborationUpdate) SetApproved(b bool) *CollaborationUpdate {
	cu.mutation.SetApproved(b)
	return cu
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (cu *CollaborationUpdate) SetNillableApproved(b *bool) *CollaborationUpdate {
	if b != nil {
		cu.SetApproved(*b)
	}
	return cu
}

// SetUpdateTime sets the "update_time" field.
func (cu *CollaborationUpdate) SetUpdateTime(t time.Time) *CollaborationUpdate {
	cu.mutation.SetUpdateTime(t)
	return cu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cu *CollaborationUpdate) SetNillableUpdateTime(t *time.Time) *CollaborationUpdate {
	if t != nil {
		cu.SetUpdateTime(*t)
	}
	return cu
}

// SetCollaboratorID sets the "collaborator" edge to the User entity by ID.
func (cu *CollaborationUpdate) SetCollaboratorID(id uuid.UUID) *CollaborationUpdate {
	cu.mutation.SetCollaboratorID(id)
	return cu
}

// SetCollaborator sets the "collaborator" edge to the User entity.
func (cu *CollaborationUpdate) SetCollaborator(u *User) *CollaborationUpdate {
	return cu.SetCollaboratorID(u.ID)
}

// SetMemo sets the "memo" edge to the Memo entity.
func (cu *CollaborationUpdate) SetMemo(m *Memo) *CollaborationUpdate {
	return cu.SetMemoID(m.ID)
}

// Mutation returns the CollaborationMutation object of the builder.
func (cu *CollaborationUpdate) Mutation() *CollaborationMutation {
	return cu.mutation
}

// ClearCollaborator clears the "collaborator" edge to the User entity.
func (cu *CollaborationUpdate) ClearCollaborator() *CollaborationUpdate {
	cu.mutation.ClearCollaborator()
	return cu
}

// ClearMemo clears the "memo" edge to the Memo entity.
func (cu *CollaborationUpdate) ClearMemo() *CollaborationUpdate {
	cu.mutation.ClearMemo()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CollaborationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CollaborationUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CollaborationUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CollaborationUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CollaborationUpdate) check() error {
	if _, ok := cu.mutation.CollaboratorID(); cu.mutation.CollaboratorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Collaboration.collaborator"`)
	}
	if _, ok := cu.mutation.MemoID(); cu.mutation.MemoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Collaboration.memo"`)
	}
	return nil
}

func (cu *CollaborationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(collaboration.Table, collaboration.Columns, sqlgraph.NewFieldSpec(collaboration.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Approved(); ok {
		_spec.SetField(collaboration.FieldApproved, field.TypeBool, value)
	}
	if value, ok := cu.mutation.UpdateTime(); ok {
		_spec.SetField(collaboration.FieldUpdateTime, field.TypeTime, value)
	}
	if cu.mutation.CollaboratorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collaboration.CollaboratorTable,
			Columns: []string{collaboration.CollaboratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CollaboratorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collaboration.CollaboratorTable,
			Columns: []string{collaboration.CollaboratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.MemoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collaboration.MemoTable,
			Columns: []string{collaboration.MemoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memo.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MemoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collaboration.MemoTable,
			Columns: []string{collaboration.MemoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collaboration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CollaborationUpdateOne is the builder for updating a single Collaboration entity.
type CollaborationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CollaborationMutation
}

// SetUserID sets the "user_id" field.
func (cuo *CollaborationUpdateOne) SetUserID(u uuid.UUID) *CollaborationUpdateOne {
	cuo.mutation.SetUserID(u)
	return cuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cuo *CollaborationUpdateOne) SetNillableUserID(u *uuid.UUID) *CollaborationUpdateOne {
	if u != nil {
		cuo.SetUserID(*u)
	}
	return cuo
}

// SetMemoID sets the "memo_id" field.
func (cuo *CollaborationUpdateOne) SetMemoID(u uuid.UUID) *CollaborationUpdateOne {
	cuo.mutation.SetMemoID(u)
	return cuo
}

// SetNillableMemoID sets the "memo_id" field if the given value is not nil.
func (cuo *CollaborationUpdateOne) SetNillableMemoID(u *uuid.UUID) *CollaborationUpdateOne {
	if u != nil {
		cuo.SetMemoID(*u)
	}
	return cuo
}

// SetApproved sets the "approved" field.
func (cuo *CollaborationUpdateOne) SetApproved(b bool) *CollaborationUpdateOne {
	cuo.mutation.SetApproved(b)
	return cuo
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (cuo *CollaborationUpdateOne) SetNillableApproved(b *bool) *CollaborationUpdateOne {
	if b != nil {
		cuo.SetApproved(*b)
	}
	return cuo
}

// SetUpdateTime sets the "update_time" field.
func (cuo *CollaborationUpdateOne) SetUpdateTime(t time.Time) *CollaborationUpdateOne {
	cuo.mutation.SetUpdateTime(t)
	return cuo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cuo *CollaborationUpdateOne) SetNillableUpdateTime(t *time.Time) *CollaborationUpdateOne {
	if t != nil {
		cuo.SetUpdateTime(*t)
	}
	return cuo
}

// SetCollaboratorID sets the "collaborator" edge to the User entity by ID.
func (cuo *CollaborationUpdateOne) SetCollaboratorID(id uuid.UUID) *CollaborationUpdateOne {
	cuo.mutation.SetCollaboratorID(id)
	return cuo
}

// SetCollaborator sets the "collaborator" edge to the User entity.
func (cuo *CollaborationUpdateOne) SetCollaborator(u *User) *CollaborationUpdateOne {
	return cuo.SetCollaboratorID(u.ID)
}

// SetMemo sets the "memo" edge to the Memo entity.
func (cuo *CollaborationUpdateOne) SetMemo(m *Memo) *CollaborationUpdateOne {
	return cuo.SetMemoID(m.ID)
}

// Mutation returns the CollaborationMutation object of the builder.
func (cuo *CollaborationUpdateOne) Mutation() *CollaborationMutation {
	return cuo.mutation
}

// ClearCollaborator clears the "collaborator" edge to the User entity.
func (cuo *CollaborationUpdateOne) ClearCollaborator() *CollaborationUpdateOne {
	cuo.mutation.ClearCollaborator()
	return cuo
}

// ClearMemo clears the "memo" edge to the Memo entity.
func (cuo *CollaborationUpdateOne) ClearMemo() *CollaborationUpdateOne {
	cuo.mutation.ClearMemo()
	return cuo
}

// Where appends a list predicates to the CollaborationUpdate builder.
func (cuo *CollaborationUpdateOne) Where(ps ...predicate.Collaboration) *CollaborationUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CollaborationUpdateOne) Select(field string, fields ...string) *CollaborationUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Collaboration entity.
func (cuo *CollaborationUpdateOne) Save(ctx context.Context) (*Collaboration, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CollaborationUpdateOne) SaveX(ctx context.Context) *Collaboration {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CollaborationUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CollaborationUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CollaborationUpdateOne) check() error {
	if _, ok := cuo.mutation.CollaboratorID(); cuo.mutation.CollaboratorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Collaboration.collaborator"`)
	}
	if _, ok := cuo.mutation.MemoID(); cuo.mutation.MemoCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Collaboration.memo"`)
	}
	return nil
}

func (cuo *CollaborationUpdateOne) sqlSave(ctx context.Context) (_node *Collaboration, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(collaboration.Table, collaboration.Columns, sqlgraph.NewFieldSpec(collaboration.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Collaboration.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, collaboration.FieldID)
		for _, f := range fields {
			if !collaboration.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != collaboration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Approved(); ok {
		_spec.SetField(collaboration.FieldApproved, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.UpdateTime(); ok {
		_spec.SetField(collaboration.FieldUpdateTime, field.TypeTime, value)
	}
	if cuo.mutation.CollaboratorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collaboration.CollaboratorTable,
			Columns: []string{collaboration.CollaboratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CollaboratorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collaboration.CollaboratorTable,
			Columns: []string{collaboration.CollaboratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.MemoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collaboration.MemoTable,
			Columns: []string{collaboration.MemoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memo.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MemoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collaboration.MemoTable,
			Columns: []string{collaboration.MemoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Collaboration{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collaboration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
