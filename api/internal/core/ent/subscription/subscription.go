// Code generated by ent, DO NOT EDIT.

package subscription

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the subscription type in the database.
	Label = "subscription"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldMemoID holds the string denoting the memo_id field in the database.
	FieldMemoID = "memo_id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// EdgeSubscriber holds the string denoting the subscriber edge name in mutations.
	EdgeSubscriber = "subscriber"
	// EdgeMemo holds the string denoting the memo edge name in mutations.
	EdgeMemo = "memo"
	// Table holds the table name of the subscription in the database.
	Table = "subscriptions"
	// SubscriberTable is the table that holds the subscriber relation/edge.
	SubscriberTable = "subscriptions"
	// SubscriberInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SubscriberInverseTable = "users"
	// SubscriberColumn is the table column denoting the subscriber relation/edge.
	SubscriberColumn = "user_id"
	// MemoTable is the table that holds the memo relation/edge.
	MemoTable = "subscriptions"
	// MemoInverseTable is the table name for the Memo entity.
	// It exists in this package in order to avoid circular dependency with the "memo" package.
	MemoInverseTable = "memos"
	// MemoColumn is the table column denoting the memo relation/edge.
	MemoColumn = "memo_id"
)

// Columns holds all SQL columns for subscription fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldMemoID,
	FieldCreateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
)

// OrderOption defines the ordering options for the Subscription queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByMemoID orders the results by the memo_id field.
func ByMemoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemoID, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// BySubscriberField orders the results by subscriber field.
func BySubscriberField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscriberStep(), sql.OrderByField(field, opts...))
	}
}

// ByMemoField orders the results by memo field.
func ByMemoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemoStep(), sql.OrderByField(field, opts...))
	}
}
func newSubscriberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscriberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SubscriberTable, SubscriberColumn),
	)
}
func newMemoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MemoTable, MemoColumn),
	)
}
