// Code generated by ent, DO NOT EDIT.

package collaboration

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the collaboration type in the database.
	Label = "collaboration"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldMemoID holds the string denoting the memo_id field in the database.
	FieldMemoID = "memo_id"
	// FieldApproved holds the string denoting the approved field in the database.
	FieldApproved = "approved"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// EdgeCollaborator holds the string denoting the collaborator edge name in mutations.
	EdgeCollaborator = "collaborator"
	// EdgeMemo holds the string denoting the memo edge name in mutations.
	EdgeMemo = "memo"
	// Table holds the table name of the collaboration in the database.
	Table = "collaborations"
	// CollaboratorTable is the table that holds the collaborator relation/edge.
	CollaboratorTable = "collaborations"
	// CollaboratorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CollaboratorInverseTable = "users"
	// CollaboratorColumn is the table column denoting the collaborator relation/edge.
	CollaboratorColumn = "user_id"
	// MemoTable is the table that holds the memo relation/edge.
	MemoTable = "collaborations"
	// MemoInverseTable is the table name for the Memo entity.
	// It exists in this package in order to avoid circular dependency with the "memo" package.
	MemoInverseTable = "memos"
	// MemoColumn is the table column denoting the memo relation/edge.
	MemoColumn = "memo_id"
)

// Columns holds all SQL columns for collaboration fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldMemoID,
	FieldApproved,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultApproved holds the default value on creation for the "approved" field.
	DefaultApproved bool
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the Collaboration queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByMemoID orders the results by the memo_id field.
func ByMemoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemoID, opts...).ToFunc()
}

// ByApproved orders the results by the approved field.
func ByApproved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproved, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}

// ByCollaboratorField orders the results by collaborator field.
func ByCollaboratorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCollaboratorStep(), sql.OrderByField(field, opts...))
	}
}

// ByMemoField orders the results by memo field.
func ByMemoField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemoStep(), sql.OrderByField(field, opts...))
	}
}
func newCollaboratorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CollaboratorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CollaboratorTable, CollaboratorColumn),
	)
}
func newMemoStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemoInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MemoTable, MemoColumn),
	)
}
