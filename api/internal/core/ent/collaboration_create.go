// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/isutare412/web-memo/api/internal/core/ent/collaboration"
	"github.com/isutare412/web-memo/api/internal/core/ent/memo"
	"github.com/isutare412/web-memo/api/internal/core/ent/user"
)

// CollaborationCreate is the builder for creating a Collaboration entity.
type CollaborationCreate struct {
	config
	mutation *CollaborationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (cc *CollaborationCreate) SetUserID(u uuid.UUID) *CollaborationCreate {
	cc.mutation.SetUserID(u)
	return cc
}

// SetMemoID sets the "memo_id" field.
func (cc *CollaborationCreate) SetMemoID(u uuid.UUID) *CollaborationCreate {
	cc.mutation.SetMemoID(u)
	return cc
}

// SetApproved sets the "approved" field.
func (cc *CollaborationCreate) SetApproved(b bool) *CollaborationCreate {
	cc.mutation.SetApproved(b)
	return cc
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (cc *CollaborationCreate) SetNillableApproved(b *bool) *CollaborationCreate {
	if b != nil {
		cc.SetApproved(*b)
	}
	return cc
}

// SetCreateTime sets the "create_time" field.
func (cc *CollaborationCreate) SetCreateTime(t time.Time) *CollaborationCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *CollaborationCreate) SetNillableCreateTime(t *time.Time) *CollaborationCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetUpdateTime sets the "update_time" field.
func (cc *CollaborationCreate) SetUpdateTime(t time.Time) *CollaborationCreate {
	cc.mutation.SetUpdateTime(t)
	return cc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cc *CollaborationCreate) SetNillableUpdateTime(t *time.Time) *CollaborationCreate {
	if t != nil {
		cc.SetUpdateTime(*t)
	}
	return cc
}

// SetCollaboratorID sets the "collaborator" edge to the User entity by ID.
func (cc *CollaborationCreate) SetCollaboratorID(id uuid.UUID) *CollaborationCreate {
	cc.mutation.SetCollaboratorID(id)
	return cc
}

// SetCollaborator sets the "collaborator" edge to the User entity.
func (cc *CollaborationCreate) SetCollaborator(u *User) *CollaborationCreate {
	return cc.SetCollaboratorID(u.ID)
}

// SetMemo sets the "memo" edge to the Memo entity.
func (cc *CollaborationCreate) SetMemo(m *Memo) *CollaborationCreate {
	return cc.SetMemoID(m.ID)
}

// Mutation returns the CollaborationMutation object of the builder.
func (cc *CollaborationCreate) Mutation() *CollaborationMutation {
	return cc.mutation
}

// Save creates the Collaboration in the database.
func (cc *CollaborationCreate) Save(ctx context.Context) (*Collaboration, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CollaborationCreate) SaveX(ctx context.Context) *Collaboration {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CollaborationCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CollaborationCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CollaborationCreate) defaults() {
	if _, ok := cc.mutation.Approved(); !ok {
		v := collaboration.DefaultApproved
		cc.mutation.SetApproved(v)
	}
	if _, ok := cc.mutation.CreateTime(); !ok {
		v := collaboration.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		v := collaboration.DefaultUpdateTime()
		cc.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CollaborationCreate) check() error {
	if _, ok := cc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Collaboration.user_id"`)}
	}
	if _, ok := cc.mutation.MemoID(); !ok {
		return &ValidationError{Name: "memo_id", err: errors.New(`ent: missing required field "Collaboration.memo_id"`)}
	}
	if _, ok := cc.mutation.Approved(); !ok {
		return &ValidationError{Name: "approved", err: errors.New(`ent: missing required field "Collaboration.approved"`)}
	}
	if _, ok := cc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Collaboration.create_time"`)}
	}
	if _, ok := cc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Collaboration.update_time"`)}
	}
	if _, ok := cc.mutation.CollaboratorID(); !ok {
		return &ValidationError{Name: "collaborator", err: errors.New(`ent: missing required edge "Collaboration.collaborator"`)}
	}
	if _, ok := cc.mutation.MemoID(); !ok {
		return &ValidationError{Name: "memo", err: errors.New(`ent: missing required edge "Collaboration.memo"`)}
	}
	return nil
}

func (cc *CollaborationCreate) sqlSave(ctx context.Context) (*Collaboration, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CollaborationCreate) createSpec() (*Collaboration, *sqlgraph.CreateSpec) {
	var (
		_node = &Collaboration{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(collaboration.Table, sqlgraph.NewFieldSpec(collaboration.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.Approved(); ok {
		_spec.SetField(collaboration.FieldApproved, field.TypeBool, value)
		_node.Approved = value
	}
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.SetField(collaboration.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cc.mutation.UpdateTime(); ok {
		_spec.SetField(collaboration.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if nodes := cc.mutation.CollaboratorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collaboration.CollaboratorTable,
			Columns: []string{collaboration.CollaboratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.MemoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   collaboration.MemoTable,
			Columns: []string{collaboration.MemoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memo.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Collaboration.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CollaborationUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (cc *CollaborationCreate) OnConflict(opts ...sql.ConflictOption) *CollaborationUpsertOne {
	cc.conflict = opts
	return &CollaborationUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Collaboration.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CollaborationCreate) OnConflictColumns(columns ...string) *CollaborationUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CollaborationUpsertOne{
		create: cc,
	}
}

type (
	// CollaborationUpsertOne is the builder for "upsert"-ing
	//  one Collaboration node.
	CollaborationUpsertOne struct {
		create *CollaborationCreate
	}

	// CollaborationUpsert is the "OnConflict" setter.
	CollaborationUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *CollaborationUpsert) SetUserID(v uuid.UUID) *CollaborationUpsert {
	u.Set(collaboration.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CollaborationUpsert) UpdateUserID() *CollaborationUpsert {
	u.SetExcluded(collaboration.FieldUserID)
	return u
}

// SetMemoID sets the "memo_id" field.
func (u *CollaborationUpsert) SetMemoID(v uuid.UUID) *CollaborationUpsert {
	u.Set(collaboration.FieldMemoID, v)
	return u
}

// UpdateMemoID sets the "memo_id" field to the value that was provided on create.
func (u *CollaborationUpsert) UpdateMemoID() *CollaborationUpsert {
	u.SetExcluded(collaboration.FieldMemoID)
	return u
}

// SetApproved sets the "approved" field.
func (u *CollaborationUpsert) SetApproved(v bool) *CollaborationUpsert {
	u.Set(collaboration.FieldApproved, v)
	return u
}

// UpdateApproved sets the "approved" field to the value that was provided on create.
func (u *CollaborationUpsert) UpdateApproved() *CollaborationUpsert {
	u.SetExcluded(collaboration.FieldApproved)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *CollaborationUpsert) SetUpdateTime(v time.Time) *CollaborationUpsert {
	u.Set(collaboration.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CollaborationUpsert) UpdateUpdateTime() *CollaborationUpsert {
	u.SetExcluded(collaboration.FieldUpdateTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Collaboration.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CollaborationUpsertOne) UpdateNewValues() *CollaborationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreateTime(); exists {
			s.SetIgnore(collaboration.FieldCreateTime)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Collaboration.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CollaborationUpsertOne) Ignore() *CollaborationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CollaborationUpsertOne) DoNothing() *CollaborationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CollaborationCreate.OnConflict
// documentation for more info.
func (u *CollaborationUpsertOne) Update(set func(*CollaborationUpsert)) *CollaborationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CollaborationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *CollaborationUpsertOne) SetUserID(v uuid.UUID) *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CollaborationUpsertOne) UpdateUserID() *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateUserID()
	})
}

// SetMemoID sets the "memo_id" field.
func (u *CollaborationUpsertOne) SetMemoID(v uuid.UUID) *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetMemoID(v)
	})
}

// UpdateMemoID sets the "memo_id" field to the value that was provided on create.
func (u *CollaborationUpsertOne) UpdateMemoID() *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateMemoID()
	})
}

// SetApproved sets the "approved" field.
func (u *CollaborationUpsertOne) SetApproved(v bool) *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetApproved(v)
	})
}

// UpdateApproved sets the "approved" field to the value that was provided on create.
func (u *CollaborationUpsertOne) UpdateApproved() *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateApproved()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *CollaborationUpsertOne) SetUpdateTime(v time.Time) *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CollaborationUpsertOne) UpdateUpdateTime() *CollaborationUpsertOne {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateUpdateTime()
	})
}

// Exec executes the query.
func (u *CollaborationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CollaborationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CollaborationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CollaborationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CollaborationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CollaborationCreateBulk is the builder for creating many Collaboration entities in bulk.
type CollaborationCreateBulk struct {
	config
	err      error
	builders []*CollaborationCreate
	conflict []sql.ConflictOption
}

// Save creates the Collaboration entities in the database.
func (ccb *CollaborationCreateBulk) Save(ctx context.Context) ([]*Collaboration, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Collaboration, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CollaborationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CollaborationCreateBulk) SaveX(ctx context.Context) []*Collaboration {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CollaborationCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CollaborationCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Collaboration.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CollaborationUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
func (ccb *CollaborationCreateBulk) OnConflict(opts ...sql.ConflictOption) *CollaborationUpsertBulk {
	ccb.conflict = opts
	return &CollaborationUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Collaboration.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CollaborationCreateBulk) OnConflictColumns(columns ...string) *CollaborationUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CollaborationUpsertBulk{
		create: ccb,
	}
}

// CollaborationUpsertBulk is the builder for "upsert"-ing
// a bulk of Collaboration nodes.
type CollaborationUpsertBulk struct {
	create *CollaborationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Collaboration.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CollaborationUpsertBulk) UpdateNewValues() *CollaborationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreateTime(); exists {
				s.SetIgnore(collaboration.FieldCreateTime)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Collaboration.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CollaborationUpsertBulk) Ignore() *CollaborationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CollaborationUpsertBulk) DoNothing() *CollaborationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CollaborationCreateBulk.OnConflict
// documentation for more info.
func (u *CollaborationUpsertBulk) Update(set func(*CollaborationUpsert)) *CollaborationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CollaborationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *CollaborationUpsertBulk) SetUserID(v uuid.UUID) *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *CollaborationUpsertBulk) UpdateUserID() *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateUserID()
	})
}

// SetMemoID sets the "memo_id" field.
func (u *CollaborationUpsertBulk) SetMemoID(v uuid.UUID) *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetMemoID(v)
	})
}

// UpdateMemoID sets the "memo_id" field to the value that was provided on create.
func (u *CollaborationUpsertBulk) UpdateMemoID() *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateMemoID()
	})
}

// SetApproved sets the "approved" field.
func (u *CollaborationUpsertBulk) SetApproved(v bool) *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetApproved(v)
	})
}

// UpdateApproved sets the "approved" field to the value that was provided on create.
func (u *CollaborationUpsertBulk) UpdateApproved() *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateApproved()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *CollaborationUpsertBulk) SetUpdateTime(v time.Time) *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *CollaborationUpsertBulk) UpdateUpdateTime() *CollaborationUpsertBulk {
	return u.Update(func(s *CollaborationUpsert) {
		s.UpdateUpdateTime()
	})
}

// Exec executes the query.
func (u *CollaborationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CollaborationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CollaborationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CollaborationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
