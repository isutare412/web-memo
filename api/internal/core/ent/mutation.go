// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/isutare412/web-memo/api/internal/core/ent/collaboration"
	"github.com/isutare412/web-memo/api/internal/core/ent/memo"
	"github.com/isutare412/web-memo/api/internal/core/ent/predicate"
	"github.com/isutare412/web-memo/api/internal/core/ent/subscription"
	"github.com/isutare412/web-memo/api/internal/core/ent/tag"
	"github.com/isutare412/web-memo/api/internal/core/ent/user"
	"github.com/isutare412/web-memo/api/internal/core/enum"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCollaboration = "Collaboration"
	TypeMemo          = "Memo"
	TypeSubscription  = "Subscription"
	TypeTag           = "Tag"
	TypeUser          = "User"
)

// CollaborationMutation represents an operation that mutates the Collaboration nodes in the graph.
type CollaborationMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	approved            *bool
	create_time         *time.Time
	update_time         *time.Time
	clearedFields       map[string]struct{}
	collaborator        *uuid.UUID
	clearedcollaborator bool
	memo                *uuid.UUID
	clearedmemo         bool
	done                bool
	oldValue            func(context.Context) (*Collaboration, error)
	predicates          []predicate.Collaboration
}

var _ ent.Mutation = (*CollaborationMutation)(nil)

// collaborationOption allows management of the mutation configuration using functional options.
type collaborationOption func(*CollaborationMutation)

// newCollaborationMutation creates new mutation for the Collaboration entity.
func newCollaborationMutation(c config, op Op, opts ...collaborationOption) *CollaborationMutation {
	m := &CollaborationMutation{
		config:        c,
		op:            op,
		typ:           TypeCollaboration,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCollaborationID sets the ID field of the mutation.
func withCollaborationID(id int) collaborationOption {
	return func(m *CollaborationMutation) {
		var (
			err   error
			once  sync.Once
			value *Collaboration
		)
		m.oldValue = func(ctx context.Context) (*Collaboration, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Collaboration.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCollaboration sets the old Collaboration of the mutation.
func withCollaboration(node *Collaboration) collaborationOption {
	return func(m *CollaborationMutation) {
		m.oldValue = func(context.Context) (*Collaboration, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CollaborationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CollaborationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CollaborationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CollaborationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Collaboration.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *CollaborationMutation) SetUserID(u uuid.UUID) {
	m.collaborator = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *CollaborationMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.collaborator
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Collaboration entity.
// If the Collaboration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollaborationMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *CollaborationMutation) ResetUserID() {
	m.collaborator = nil
}

// SetMemoID sets the "memo_id" field.
func (m *CollaborationMutation) SetMemoID(u uuid.UUID) {
	m.memo = &u
}

// MemoID returns the value of the "memo_id" field in the mutation.
func (m *CollaborationMutation) MemoID() (r uuid.UUID, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemoID returns the old "memo_id" field's value of the Collaboration entity.
// If the Collaboration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollaborationMutation) OldMemoID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemoID: %w", err)
	}
	return oldValue.MemoID, nil
}

// ResetMemoID resets all changes to the "memo_id" field.
func (m *CollaborationMutation) ResetMemoID() {
	m.memo = nil
}

// SetApproved sets the "approved" field.
func (m *CollaborationMutation) SetApproved(b bool) {
	m.approved = &b
}

// Approved returns the value of the "approved" field in the mutation.
func (m *CollaborationMutation) Approved() (r bool, exists bool) {
	v := m.approved
	if v == nil {
		return
	}
	return *v, true
}

// OldApproved returns the old "approved" field's value of the Collaboration entity.
// If the Collaboration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollaborationMutation) OldApproved(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApproved is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApproved requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApproved: %w", err)
	}
	return oldValue.Approved, nil
}

// ResetApproved resets all changes to the "approved" field.
func (m *CollaborationMutation) ResetApproved() {
	m.approved = nil
}

// SetCreateTime sets the "create_time" field.
func (m *CollaborationMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *CollaborationMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Collaboration entity.
// If the Collaboration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollaborationMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *CollaborationMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *CollaborationMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *CollaborationMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Collaboration entity.
// If the Collaboration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollaborationMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *CollaborationMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetCollaboratorID sets the "collaborator" edge to the User entity by id.
func (m *CollaborationMutation) SetCollaboratorID(id uuid.UUID) {
	m.collaborator = &id
}

// ClearCollaborator clears the "collaborator" edge to the User entity.
func (m *CollaborationMutation) ClearCollaborator() {
	m.clearedcollaborator = true
	m.clearedFields[collaboration.FieldUserID] = struct{}{}
}

// CollaboratorCleared reports if the "collaborator" edge to the User entity was cleared.
func (m *CollaborationMutation) CollaboratorCleared() bool {
	return m.clearedcollaborator
}

// CollaboratorID returns the "collaborator" edge ID in the mutation.
func (m *CollaborationMutation) CollaboratorID() (id uuid.UUID, exists bool) {
	if m.collaborator != nil {
		return *m.collaborator, true
	}
	return
}

// CollaboratorIDs returns the "collaborator" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CollaboratorID instead. It exists only for internal usage by the builders.
func (m *CollaborationMutation) CollaboratorIDs() (ids []uuid.UUID) {
	if id := m.collaborator; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCollaborator resets all changes to the "collaborator" edge.
func (m *CollaborationMutation) ResetCollaborator() {
	m.collaborator = nil
	m.clearedcollaborator = false
}

// ClearMemo clears the "memo" edge to the Memo entity.
func (m *CollaborationMutation) ClearMemo() {
	m.clearedmemo = true
	m.clearedFields[collaboration.FieldMemoID] = struct{}{}
}

// MemoCleared reports if the "memo" edge to the Memo entity was cleared.
func (m *CollaborationMutation) MemoCleared() bool {
	return m.clearedmemo
}

// MemoIDs returns the "memo" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MemoID instead. It exists only for internal usage by the builders.
func (m *CollaborationMutation) MemoIDs() (ids []uuid.UUID) {
	if id := m.memo; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMemo resets all changes to the "memo" edge.
func (m *CollaborationMutation) ResetMemo() {
	m.memo = nil
	m.clearedmemo = false
}

// Where appends a list predicates to the CollaborationMutation builder.
func (m *CollaborationMutation) Where(ps ...predicate.Collaboration) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CollaborationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CollaborationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Collaboration, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CollaborationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CollaborationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Collaboration).
func (m *CollaborationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CollaborationMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.collaborator != nil {
		fields = append(fields, collaboration.FieldUserID)
	}
	if m.memo != nil {
		fields = append(fields, collaboration.FieldMemoID)
	}
	if m.approved != nil {
		fields = append(fields, collaboration.FieldApproved)
	}
	if m.create_time != nil {
		fields = append(fields, collaboration.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, collaboration.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CollaborationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case collaboration.FieldUserID:
		return m.UserID()
	case collaboration.FieldMemoID:
		return m.MemoID()
	case collaboration.FieldApproved:
		return m.Approved()
	case collaboration.FieldCreateTime:
		return m.CreateTime()
	case collaboration.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CollaborationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case collaboration.FieldUserID:
		return m.OldUserID(ctx)
	case collaboration.FieldMemoID:
		return m.OldMemoID(ctx)
	case collaboration.FieldApproved:
		return m.OldApproved(ctx)
	case collaboration.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case collaboration.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown Collaboration field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CollaborationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case collaboration.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case collaboration.FieldMemoID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemoID(v)
		return nil
	case collaboration.FieldApproved:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApproved(v)
		return nil
	case collaboration.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case collaboration.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Collaboration field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CollaborationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CollaborationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CollaborationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Collaboration numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CollaborationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CollaborationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CollaborationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Collaboration nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CollaborationMutation) ResetField(name string) error {
	switch name {
	case collaboration.FieldUserID:
		m.ResetUserID()
		return nil
	case collaboration.FieldMemoID:
		m.ResetMemoID()
		return nil
	case collaboration.FieldApproved:
		m.ResetApproved()
		return nil
	case collaboration.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case collaboration.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown Collaboration field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CollaborationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.collaborator != nil {
		edges = append(edges, collaboration.EdgeCollaborator)
	}
	if m.memo != nil {
		edges = append(edges, collaboration.EdgeMemo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CollaborationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case collaboration.EdgeCollaborator:
		if id := m.collaborator; id != nil {
			return []ent.Value{*id}
		}
	case collaboration.EdgeMemo:
		if id := m.memo; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CollaborationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CollaborationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CollaborationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcollaborator {
		edges = append(edges, collaboration.EdgeCollaborator)
	}
	if m.clearedmemo {
		edges = append(edges, collaboration.EdgeMemo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CollaborationMutation) EdgeCleared(name string) bool {
	switch name {
	case collaboration.EdgeCollaborator:
		return m.clearedcollaborator
	case collaboration.EdgeMemo:
		return m.clearedmemo
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CollaborationMutation) ClearEdge(name string) error {
	switch name {
	case collaboration.EdgeCollaborator:
		m.ClearCollaborator()
		return nil
	case collaboration.EdgeMemo:
		m.ClearMemo()
		return nil
	}
	return fmt.Errorf("unknown Collaboration unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CollaborationMutation) ResetEdge(name string) error {
	switch name {
	case collaboration.EdgeCollaborator:
		m.ResetCollaborator()
		return nil
	case collaboration.EdgeMemo:
		m.ResetMemo()
		return nil
	}
	return fmt.Errorf("unknown Collaboration edge %s", name)
}

// MemoMutation represents an operation that mutates the Memo nodes in the graph.
type MemoMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	title                 *string
	content               *string
	is_published          *bool
	create_time           *time.Time
	update_time           *time.Time
	clearedFields         map[string]struct{}
	owner                 *uuid.UUID
	clearedowner          bool
	tags                  map[int]struct{}
	removedtags           map[int]struct{}
	clearedtags           bool
	subscribers           map[uuid.UUID]struct{}
	removedsubscribers    map[uuid.UUID]struct{}
	clearedsubscribers    bool
	collaborators         map[uuid.UUID]struct{}
	removedcollaborators  map[uuid.UUID]struct{}
	clearedcollaborators  bool
	subscriptions         map[int]struct{}
	removedsubscriptions  map[int]struct{}
	clearedsubscriptions  bool
	collaborations        map[int]struct{}
	removedcollaborations map[int]struct{}
	clearedcollaborations bool
	done                  bool
	oldValue              func(context.Context) (*Memo, error)
	predicates            []predicate.Memo
}

var _ ent.Mutation = (*MemoMutation)(nil)

// memoOption allows management of the mutation configuration using functional options.
type memoOption func(*MemoMutation)

// newMemoMutation creates new mutation for the Memo entity.
func newMemoMutation(c config, op Op, opts ...memoOption) *MemoMutation {
	m := &MemoMutation{
		config:        c,
		op:            op,
		typ:           TypeMemo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMemoID sets the ID field of the mutation.
func withMemoID(id uuid.UUID) memoOption {
	return func(m *MemoMutation) {
		var (
			err   error
			once  sync.Once
			value *Memo
		)
		m.oldValue = func(ctx context.Context) (*Memo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Memo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMemo sets the old Memo of the mutation.
func withMemo(node *Memo) memoOption {
	return func(m *MemoMutation) {
		m.oldValue = func(context.Context) (*Memo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MemoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MemoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Memo entities.
func (m *MemoMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MemoMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MemoMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Memo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOwnerID sets the "owner_id" field.
func (m *MemoMutation) SetOwnerID(u uuid.UUID) {
	m.owner = &u
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *MemoMutation) OwnerID() (r uuid.UUID, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the Memo entity.
// If the Memo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoMutation) OldOwnerID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *MemoMutation) ResetOwnerID() {
	m.owner = nil
}

// SetTitle sets the "title" field.
func (m *MemoMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *MemoMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Memo entity.
// If the Memo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *MemoMutation) ResetTitle() {
	m.title = nil
}

// SetContent sets the "content" field.
func (m *MemoMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *MemoMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Memo entity.
// If the Memo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *MemoMutation) ResetContent() {
	m.content = nil
}

// SetIsPublished sets the "is_published" field.
func (m *MemoMutation) SetIsPublished(b bool) {
	m.is_published = &b
}

// IsPublished returns the value of the "is_published" field in the mutation.
func (m *MemoMutation) IsPublished() (r bool, exists bool) {
	v := m.is_published
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPublished returns the old "is_published" field's value of the Memo entity.
// If the Memo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoMutation) OldIsPublished(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsPublished is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsPublished requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPublished: %w", err)
	}
	return oldValue.IsPublished, nil
}

// ResetIsPublished resets all changes to the "is_published" field.
func (m *MemoMutation) ResetIsPublished() {
	m.is_published = nil
}

// SetCreateTime sets the "create_time" field.
func (m *MemoMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *MemoMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Memo entity.
// If the Memo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *MemoMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *MemoMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *MemoMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Memo entity.
// If the Memo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MemoMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *MemoMutation) ResetUpdateTime() {
	m.update_time = nil
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *MemoMutation) ClearOwner() {
	m.clearedowner = true
	m.clearedFields[memo.FieldOwnerID] = struct{}{}
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *MemoMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *MemoMutation) OwnerIDs() (ids []uuid.UUID) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *MemoMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddTagIDs adds the "tags" edge to the Tag entity by ids.
func (m *MemoMutation) AddTagIDs(ids ...int) {
	if m.tags == nil {
		m.tags = make(map[int]struct{})
	}
	for i := range ids {
		m.tags[ids[i]] = struct{}{}
	}
}

// ClearTags clears the "tags" edge to the Tag entity.
func (m *MemoMutation) ClearTags() {
	m.clearedtags = true
}

// TagsCleared reports if the "tags" edge to the Tag entity was cleared.
func (m *MemoMutation) TagsCleared() bool {
	return m.clearedtags
}

// RemoveTagIDs removes the "tags" edge to the Tag entity by IDs.
func (m *MemoMutation) RemoveTagIDs(ids ...int) {
	if m.removedtags == nil {
		m.removedtags = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tags, ids[i])
		m.removedtags[ids[i]] = struct{}{}
	}
}

// RemovedTags returns the removed IDs of the "tags" edge to the Tag entity.
func (m *MemoMutation) RemovedTagsIDs() (ids []int) {
	for id := range m.removedtags {
		ids = append(ids, id)
	}
	return
}

// TagsIDs returns the "tags" edge IDs in the mutation.
func (m *MemoMutation) TagsIDs() (ids []int) {
	for id := range m.tags {
		ids = append(ids, id)
	}
	return
}

// ResetTags resets all changes to the "tags" edge.
func (m *MemoMutation) ResetTags() {
	m.tags = nil
	m.clearedtags = false
	m.removedtags = nil
}

// AddSubscriberIDs adds the "subscribers" edge to the User entity by ids.
func (m *MemoMutation) AddSubscriberIDs(ids ...uuid.UUID) {
	if m.subscribers == nil {
		m.subscribers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.subscribers[ids[i]] = struct{}{}
	}
}

// ClearSubscribers clears the "subscribers" edge to the User entity.
func (m *MemoMutation) ClearSubscribers() {
	m.clearedsubscribers = true
}

// SubscribersCleared reports if the "subscribers" edge to the User entity was cleared.
func (m *MemoMutation) SubscribersCleared() bool {
	return m.clearedsubscribers
}

// RemoveSubscriberIDs removes the "subscribers" edge to the User entity by IDs.
func (m *MemoMutation) RemoveSubscriberIDs(ids ...uuid.UUID) {
	if m.removedsubscribers == nil {
		m.removedsubscribers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.subscribers, ids[i])
		m.removedsubscribers[ids[i]] = struct{}{}
	}
}

// RemovedSubscribers returns the removed IDs of the "subscribers" edge to the User entity.
func (m *MemoMutation) RemovedSubscribersIDs() (ids []uuid.UUID) {
	for id := range m.removedsubscribers {
		ids = append(ids, id)
	}
	return
}

// SubscribersIDs returns the "subscribers" edge IDs in the mutation.
func (m *MemoMutation) SubscribersIDs() (ids []uuid.UUID) {
	for id := range m.subscribers {
		ids = append(ids, id)
	}
	return
}

// ResetSubscribers resets all changes to the "subscribers" edge.
func (m *MemoMutation) ResetSubscribers() {
	m.subscribers = nil
	m.clearedsubscribers = false
	m.removedsubscribers = nil
}

// AddCollaboratorIDs adds the "collaborators" edge to the User entity by ids.
func (m *MemoMutation) AddCollaboratorIDs(ids ...uuid.UUID) {
	if m.collaborators == nil {
		m.collaborators = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.collaborators[ids[i]] = struct{}{}
	}
}

// ClearCollaborators clears the "collaborators" edge to the User entity.
func (m *MemoMutation) ClearCollaborators() {
	m.clearedcollaborators = true
}

// CollaboratorsCleared reports if the "collaborators" edge to the User entity was cleared.
func (m *MemoMutation) CollaboratorsCleared() bool {
	return m.clearedcollaborators
}

// RemoveCollaboratorIDs removes the "collaborators" edge to the User entity by IDs.
func (m *MemoMutation) RemoveCollaboratorIDs(ids ...uuid.UUID) {
	if m.removedcollaborators == nil {
		m.removedcollaborators = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.collaborators, ids[i])
		m.removedcollaborators[ids[i]] = struct{}{}
	}
}

// RemovedCollaborators returns the removed IDs of the "collaborators" edge to the User entity.
func (m *MemoMutation) RemovedCollaboratorsIDs() (ids []uuid.UUID) {
	for id := range m.removedcollaborators {
		ids = append(ids, id)
	}
	return
}

// CollaboratorsIDs returns the "collaborators" edge IDs in the mutation.
func (m *MemoMutation) CollaboratorsIDs() (ids []uuid.UUID) {
	for id := range m.collaborators {
		ids = append(ids, id)
	}
	return
}

// ResetCollaborators resets all changes to the "collaborators" edge.
func (m *MemoMutation) ResetCollaborators() {
	m.collaborators = nil
	m.clearedcollaborators = false
	m.removedcollaborators = nil
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by ids.
func (m *MemoMutation) AddSubscriptionIDs(ids ...int) {
	if m.subscriptions == nil {
		m.subscriptions = make(map[int]struct{})
	}
	for i := range ids {
		m.subscriptions[ids[i]] = struct{}{}
	}
}

// ClearSubscriptions clears the "subscriptions" edge to the Subscription entity.
func (m *MemoMutation) ClearSubscriptions() {
	m.clearedsubscriptions = true
}

// SubscriptionsCleared reports if the "subscriptions" edge to the Subscription entity was cleared.
func (m *MemoMutation) SubscriptionsCleared() bool {
	return m.clearedsubscriptions
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to the Subscription entity by IDs.
func (m *MemoMutation) RemoveSubscriptionIDs(ids ...int) {
	if m.removedsubscriptions == nil {
		m.removedsubscriptions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.subscriptions, ids[i])
		m.removedsubscriptions[ids[i]] = struct{}{}
	}
}

// RemovedSubscriptions returns the removed IDs of the "subscriptions" edge to the Subscription entity.
func (m *MemoMutation) RemovedSubscriptionsIDs() (ids []int) {
	for id := range m.removedsubscriptions {
		ids = append(ids, id)
	}
	return
}

// SubscriptionsIDs returns the "subscriptions" edge IDs in the mutation.
func (m *MemoMutation) SubscriptionsIDs() (ids []int) {
	for id := range m.subscriptions {
		ids = append(ids, id)
	}
	return
}

// ResetSubscriptions resets all changes to the "subscriptions" edge.
func (m *MemoMutation) ResetSubscriptions() {
	m.subscriptions = nil
	m.clearedsubscriptions = false
	m.removedsubscriptions = nil
}

// AddCollaborationIDs adds the "collaborations" edge to the Collaboration entity by ids.
func (m *MemoMutation) AddCollaborationIDs(ids ...int) {
	if m.collaborations == nil {
		m.collaborations = make(map[int]struct{})
	}
	for i := range ids {
		m.collaborations[ids[i]] = struct{}{}
	}
}

// ClearCollaborations clears the "collaborations" edge to the Collaboration entity.
func (m *MemoMutation) ClearCollaborations() {
	m.clearedcollaborations = true
}

// CollaborationsCleared reports if the "collaborations" edge to the Collaboration entity was cleared.
func (m *MemoMutation) CollaborationsCleared() bool {
	return m.clearedcollaborations
}

// RemoveCollaborationIDs removes the "collaborations" edge to the Collaboration entity by IDs.
func (m *MemoMutation) RemoveCollaborationIDs(ids ...int) {
	if m.removedcollaborations == nil {
		m.removedcollaborations = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.collaborations, ids[i])
		m.removedcollaborations[ids[i]] = struct{}{}
	}
}

// RemovedCollaborations returns the removed IDs of the "collaborations" edge to the Collaboration entity.
func (m *MemoMutation) RemovedCollaborationsIDs() (ids []int) {
	for id := range m.removedcollaborations {
		ids = append(ids, id)
	}
	return
}

// CollaborationsIDs returns the "collaborations" edge IDs in the mutation.
func (m *MemoMutation) CollaborationsIDs() (ids []int) {
	for id := range m.collaborations {
		ids = append(ids, id)
	}
	return
}

// ResetCollaborations resets all changes to the "collaborations" edge.
func (m *MemoMutation) ResetCollaborations() {
	m.collaborations = nil
	m.clearedcollaborations = false
	m.removedcollaborations = nil
}

// Where appends a list predicates to the MemoMutation builder.
func (m *MemoMutation) Where(ps ...predicate.Memo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MemoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MemoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Memo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MemoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MemoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Memo).
func (m *MemoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MemoMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.owner != nil {
		fields = append(fields, memo.FieldOwnerID)
	}
	if m.title != nil {
		fields = append(fields, memo.FieldTitle)
	}
	if m.content != nil {
		fields = append(fields, memo.FieldContent)
	}
	if m.is_published != nil {
		fields = append(fields, memo.FieldIsPublished)
	}
	if m.create_time != nil {
		fields = append(fields, memo.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, memo.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MemoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case memo.FieldOwnerID:
		return m.OwnerID()
	case memo.FieldTitle:
		return m.Title()
	case memo.FieldContent:
		return m.Content()
	case memo.FieldIsPublished:
		return m.IsPublished()
	case memo.FieldCreateTime:
		return m.CreateTime()
	case memo.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MemoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case memo.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case memo.FieldTitle:
		return m.OldTitle(ctx)
	case memo.FieldContent:
		return m.OldContent(ctx)
	case memo.FieldIsPublished:
		return m.OldIsPublished(ctx)
	case memo.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case memo.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown Memo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case memo.FieldOwnerID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case memo.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case memo.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case memo.FieldIsPublished:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPublished(v)
		return nil
	case memo.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case memo.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Memo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MemoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MemoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MemoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Memo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MemoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MemoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MemoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Memo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MemoMutation) ResetField(name string) error {
	switch name {
	case memo.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case memo.FieldTitle:
		m.ResetTitle()
		return nil
	case memo.FieldContent:
		m.ResetContent()
		return nil
	case memo.FieldIsPublished:
		m.ResetIsPublished()
		return nil
	case memo.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case memo.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown Memo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MemoMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.owner != nil {
		edges = append(edges, memo.EdgeOwner)
	}
	if m.tags != nil {
		edges = append(edges, memo.EdgeTags)
	}
	if m.subscribers != nil {
		edges = append(edges, memo.EdgeSubscribers)
	}
	if m.collaborators != nil {
		edges = append(edges, memo.EdgeCollaborators)
	}
	if m.subscriptions != nil {
		edges = append(edges, memo.EdgeSubscriptions)
	}
	if m.collaborations != nil {
		edges = append(edges, memo.EdgeCollaborations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MemoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case memo.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case memo.EdgeTags:
		ids := make([]ent.Value, 0, len(m.tags))
		for id := range m.tags {
			ids = append(ids, id)
		}
		return ids
	case memo.EdgeSubscribers:
		ids := make([]ent.Value, 0, len(m.subscribers))
		for id := range m.subscribers {
			ids = append(ids, id)
		}
		return ids
	case memo.EdgeCollaborators:
		ids := make([]ent.Value, 0, len(m.collaborators))
		for id := range m.collaborators {
			ids = append(ids, id)
		}
		return ids
	case memo.EdgeSubscriptions:
		ids := make([]ent.Value, 0, len(m.subscriptions))
		for id := range m.subscriptions {
			ids = append(ids, id)
		}
		return ids
	case memo.EdgeCollaborations:
		ids := make([]ent.Value, 0, len(m.collaborations))
		for id := range m.collaborations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MemoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedtags != nil {
		edges = append(edges, memo.EdgeTags)
	}
	if m.removedsubscribers != nil {
		edges = append(edges, memo.EdgeSubscribers)
	}
	if m.removedcollaborators != nil {
		edges = append(edges, memo.EdgeCollaborators)
	}
	if m.removedsubscriptions != nil {
		edges = append(edges, memo.EdgeSubscriptions)
	}
	if m.removedcollaborations != nil {
		edges = append(edges, memo.EdgeCollaborations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MemoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case memo.EdgeTags:
		ids := make([]ent.Value, 0, len(m.removedtags))
		for id := range m.removedtags {
			ids = append(ids, id)
		}
		return ids
	case memo.EdgeSubscribers:
		ids := make([]ent.Value, 0, len(m.removedsubscribers))
		for id := range m.removedsubscribers {
			ids = append(ids, id)
		}
		return ids
	case memo.EdgeCollaborators:
		ids := make([]ent.Value, 0, len(m.removedcollaborators))
		for id := range m.removedcollaborators {
			ids = append(ids, id)
		}
		return ids
	case memo.EdgeSubscriptions:
		ids := make([]ent.Value, 0, len(m.removedsubscriptions))
		for id := range m.removedsubscriptions {
			ids = append(ids, id)
		}
		return ids
	case memo.EdgeCollaborations:
		ids := make([]ent.Value, 0, len(m.removedcollaborations))
		for id := range m.removedcollaborations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MemoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedowner {
		edges = append(edges, memo.EdgeOwner)
	}
	if m.clearedtags {
		edges = append(edges, memo.EdgeTags)
	}
	if m.clearedsubscribers {
		edges = append(edges, memo.EdgeSubscribers)
	}
	if m.clearedcollaborators {
		edges = append(edges, memo.EdgeCollaborators)
	}
	if m.clearedsubscriptions {
		edges = append(edges, memo.EdgeSubscriptions)
	}
	if m.clearedcollaborations {
		edges = append(edges, memo.EdgeCollaborations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MemoMutation) EdgeCleared(name string) bool {
	switch name {
	case memo.EdgeOwner:
		return m.clearedowner
	case memo.EdgeTags:
		return m.clearedtags
	case memo.EdgeSubscribers:
		return m.clearedsubscribers
	case memo.EdgeCollaborators:
		return m.clearedcollaborators
	case memo.EdgeSubscriptions:
		return m.clearedsubscriptions
	case memo.EdgeCollaborations:
		return m.clearedcollaborations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MemoMutation) ClearEdge(name string) error {
	switch name {
	case memo.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Memo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MemoMutation) ResetEdge(name string) error {
	switch name {
	case memo.EdgeOwner:
		m.ResetOwner()
		return nil
	case memo.EdgeTags:
		m.ResetTags()
		return nil
	case memo.EdgeSubscribers:
		m.ResetSubscribers()
		return nil
	case memo.EdgeCollaborators:
		m.ResetCollaborators()
		return nil
	case memo.EdgeSubscriptions:
		m.ResetSubscriptions()
		return nil
	case memo.EdgeCollaborations:
		m.ResetCollaborations()
		return nil
	}
	return fmt.Errorf("unknown Memo edge %s", name)
}

// SubscriptionMutation represents an operation that mutates the Subscription nodes in the graph.
type SubscriptionMutation struct {
	config
	op                Op
	typ               string
	id                *int
	create_time       *time.Time
	clearedFields     map[string]struct{}
	subscriber        *uuid.UUID
	clearedsubscriber bool
	memo              *uuid.UUID
	clearedmemo       bool
	done              bool
	oldValue          func(context.Context) (*Subscription, error)
	predicates        []predicate.Subscription
}

var _ ent.Mutation = (*SubscriptionMutation)(nil)

// subscriptionOption allows management of the mutation configuration using functional options.
type subscriptionOption func(*SubscriptionMutation)

// newSubscriptionMutation creates new mutation for the Subscription entity.
func newSubscriptionMutation(c config, op Op, opts ...subscriptionOption) *SubscriptionMutation {
	m := &SubscriptionMutation{
		config:        c,
		op:            op,
		typ:           TypeSubscription,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubscriptionID sets the ID field of the mutation.
func withSubscriptionID(id int) subscriptionOption {
	return func(m *SubscriptionMutation) {
		var (
			err   error
			once  sync.Once
			value *Subscription
		)
		m.oldValue = func(ctx context.Context) (*Subscription, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Subscription.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubscription sets the old Subscription of the mutation.
func withSubscription(node *Subscription) subscriptionOption {
	return func(m *SubscriptionMutation) {
		m.oldValue = func(context.Context) (*Subscription, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubscriptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubscriptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubscriptionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubscriptionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Subscription.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *SubscriptionMutation) SetUserID(u uuid.UUID) {
	m.subscriber = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *SubscriptionMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.subscriber
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *SubscriptionMutation) ResetUserID() {
	m.subscriber = nil
}

// SetMemoID sets the "memo_id" field.
func (m *SubscriptionMutation) SetMemoID(u uuid.UUID) {
	m.memo = &u
}

// MemoID returns the value of the "memo_id" field in the mutation.
func (m *SubscriptionMutation) MemoID() (r uuid.UUID, exists bool) {
	v := m.memo
	if v == nil {
		return
	}
	return *v, true
}

// OldMemoID returns the old "memo_id" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldMemoID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemoID: %w", err)
	}
	return oldValue.MemoID, nil
}

// ResetMemoID resets all changes to the "memo_id" field.
func (m *SubscriptionMutation) ResetMemoID() {
	m.memo = nil
}

// SetCreateTime sets the "create_time" field.
func (m *SubscriptionMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *SubscriptionMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Subscription entity.
// If the Subscription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubscriptionMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *SubscriptionMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetSubscriberID sets the "subscriber" edge to the User entity by id.
func (m *SubscriptionMutation) SetSubscriberID(id uuid.UUID) {
	m.subscriber = &id
}

// ClearSubscriber clears the "subscriber" edge to the User entity.
func (m *SubscriptionMutation) ClearSubscriber() {
	m.clearedsubscriber = true
	m.clearedFields[subscription.FieldUserID] = struct{}{}
}

// SubscriberCleared reports if the "subscriber" edge to the User entity was cleared.
func (m *SubscriptionMutation) SubscriberCleared() bool {
	return m.clearedsubscriber
}

// SubscriberID returns the "subscriber" edge ID in the mutation.
func (m *SubscriptionMutation) SubscriberID() (id uuid.UUID, exists bool) {
	if m.subscriber != nil {
		return *m.subscriber, true
	}
	return
}

// SubscriberIDs returns the "subscriber" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubscriberID instead. It exists only for internal usage by the builders.
func (m *SubscriptionMutation) SubscriberIDs() (ids []uuid.UUID) {
	if id := m.subscriber; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubscriber resets all changes to the "subscriber" edge.
func (m *SubscriptionMutation) ResetSubscriber() {
	m.subscriber = nil
	m.clearedsubscriber = false
}

// ClearMemo clears the "memo" edge to the Memo entity.
func (m *SubscriptionMutation) ClearMemo() {
	m.clearedmemo = true
	m.clearedFields[subscription.FieldMemoID] = struct{}{}
}

// MemoCleared reports if the "memo" edge to the Memo entity was cleared.
func (m *SubscriptionMutation) MemoCleared() bool {
	return m.clearedmemo
}

// MemoIDs returns the "memo" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MemoID instead. It exists only for internal usage by the builders.
func (m *SubscriptionMutation) MemoIDs() (ids []uuid.UUID) {
	if id := m.memo; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMemo resets all changes to the "memo" edge.
func (m *SubscriptionMutation) ResetMemo() {
	m.memo = nil
	m.clearedmemo = false
}

// Where appends a list predicates to the SubscriptionMutation builder.
func (m *SubscriptionMutation) Where(ps ...predicate.Subscription) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubscriptionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubscriptionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Subscription, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubscriptionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubscriptionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Subscription).
func (m *SubscriptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubscriptionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.subscriber != nil {
		fields = append(fields, subscription.FieldUserID)
	}
	if m.memo != nil {
		fields = append(fields, subscription.FieldMemoID)
	}
	if m.create_time != nil {
		fields = append(fields, subscription.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubscriptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subscription.FieldUserID:
		return m.UserID()
	case subscription.FieldMemoID:
		return m.MemoID()
	case subscription.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubscriptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subscription.FieldUserID:
		return m.OldUserID(ctx)
	case subscription.FieldMemoID:
		return m.OldMemoID(ctx)
	case subscription.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown Subscription field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subscription.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case subscription.FieldMemoID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemoID(v)
		return nil
	case subscription.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Subscription field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubscriptionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubscriptionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubscriptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Subscription numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubscriptionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubscriptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubscriptionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Subscription nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubscriptionMutation) ResetField(name string) error {
	switch name {
	case subscription.FieldUserID:
		m.ResetUserID()
		return nil
	case subscription.FieldMemoID:
		m.ResetMemoID()
		return nil
	case subscription.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown Subscription field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubscriptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.subscriber != nil {
		edges = append(edges, subscription.EdgeSubscriber)
	}
	if m.memo != nil {
		edges = append(edges, subscription.EdgeMemo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubscriptionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subscription.EdgeSubscriber:
		if id := m.subscriber; id != nil {
			return []ent.Value{*id}
		}
	case subscription.EdgeMemo:
		if id := m.memo; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubscriptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubscriptionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubscriptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsubscriber {
		edges = append(edges, subscription.EdgeSubscriber)
	}
	if m.clearedmemo {
		edges = append(edges, subscription.EdgeMemo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubscriptionMutation) EdgeCleared(name string) bool {
	switch name {
	case subscription.EdgeSubscriber:
		return m.clearedsubscriber
	case subscription.EdgeMemo:
		return m.clearedmemo
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubscriptionMutation) ClearEdge(name string) error {
	switch name {
	case subscription.EdgeSubscriber:
		m.ClearSubscriber()
		return nil
	case subscription.EdgeMemo:
		m.ClearMemo()
		return nil
	}
	return fmt.Errorf("unknown Subscription unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubscriptionMutation) ResetEdge(name string) error {
	switch name {
	case subscription.EdgeSubscriber:
		m.ResetSubscriber()
		return nil
	case subscription.EdgeMemo:
		m.ResetMemo()
		return nil
	}
	return fmt.Errorf("unknown Subscription edge %s", name)
}

// TagMutation represents an operation that mutates the Tag nodes in the graph.
type TagMutation struct {
	config
	op            Op
	typ           string
	id            *int
	create_time   *time.Time
	update_time   *time.Time
	name          *string
	clearedFields map[string]struct{}
	memos         map[uuid.UUID]struct{}
	removedmemos  map[uuid.UUID]struct{}
	clearedmemos  bool
	done          bool
	oldValue      func(context.Context) (*Tag, error)
	predicates    []predicate.Tag
}

var _ ent.Mutation = (*TagMutation)(nil)

// tagOption allows management of the mutation configuration using functional options.
type tagOption func(*TagMutation)

// newTagMutation creates new mutation for the Tag entity.
func newTagMutation(c config, op Op, opts ...tagOption) *TagMutation {
	m := &TagMutation{
		config:        c,
		op:            op,
		typ:           TypeTag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTagID sets the ID field of the mutation.
func withTagID(id int) tagOption {
	return func(m *TagMutation) {
		var (
			err   error
			once  sync.Once
			value *Tag
		)
		m.oldValue = func(ctx context.Context) (*Tag, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTag sets the old Tag of the mutation.
func withTag(node *Tag) tagOption {
	return func(m *TagMutation) {
		m.oldValue = func(context.Context) (*Tag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TagMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TagMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tag.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *TagMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *TagMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Tag entity.
// If the Tag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TagMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *TagMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *TagMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *TagMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Tag entity.
// If the Tag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TagMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *TagMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetName sets the "name" field.
func (m *TagMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TagMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Tag entity.
// If the Tag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TagMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TagMutation) ResetName() {
	m.name = nil
}

// AddMemoIDs adds the "memos" edge to the Memo entity by ids.
func (m *TagMutation) AddMemoIDs(ids ...uuid.UUID) {
	if m.memos == nil {
		m.memos = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.memos[ids[i]] = struct{}{}
	}
}

// ClearMemos clears the "memos" edge to the Memo entity.
func (m *TagMutation) ClearMemos() {
	m.clearedmemos = true
}

// MemosCleared reports if the "memos" edge to the Memo entity was cleared.
func (m *TagMutation) MemosCleared() bool {
	return m.clearedmemos
}

// RemoveMemoIDs removes the "memos" edge to the Memo entity by IDs.
func (m *TagMutation) RemoveMemoIDs(ids ...uuid.UUID) {
	if m.removedmemos == nil {
		m.removedmemos = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.memos, ids[i])
		m.removedmemos[ids[i]] = struct{}{}
	}
}

// RemovedMemos returns the removed IDs of the "memos" edge to the Memo entity.
func (m *TagMutation) RemovedMemosIDs() (ids []uuid.UUID) {
	for id := range m.removedmemos {
		ids = append(ids, id)
	}
	return
}

// MemosIDs returns the "memos" edge IDs in the mutation.
func (m *TagMutation) MemosIDs() (ids []uuid.UUID) {
	for id := range m.memos {
		ids = append(ids, id)
	}
	return
}

// ResetMemos resets all changes to the "memos" edge.
func (m *TagMutation) ResetMemos() {
	m.memos = nil
	m.clearedmemos = false
	m.removedmemos = nil
}

// Where appends a list predicates to the TagMutation builder.
func (m *TagMutation) Where(ps ...predicate.Tag) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TagMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TagMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Tag, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TagMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TagMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Tag).
func (m *TagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TagMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.create_time != nil {
		fields = append(fields, tag.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, tag.FieldUpdateTime)
	}
	if m.name != nil {
		fields = append(fields, tag.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tag.FieldCreateTime:
		return m.CreateTime()
	case tag.FieldUpdateTime:
		return m.UpdateTime()
	case tag.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tag.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case tag.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case tag.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Tag field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tag.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case tag.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case tag.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Tag field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TagMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TagMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TagMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TagMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TagMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tag nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TagMutation) ResetField(name string) error {
	switch name {
	case tag.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case tag.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case tag.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Tag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TagMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.memos != nil {
		edges = append(edges, tag.EdgeMemos)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tag.EdgeMemos:
		ids := make([]ent.Value, 0, len(m.memos))
		for id := range m.memos {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmemos != nil {
		edges = append(edges, tag.EdgeMemos)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TagMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case tag.EdgeMemos:
		ids := make([]ent.Value, 0, len(m.removedmemos))
		for id := range m.removedmemos {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmemos {
		edges = append(edges, tag.EdgeMemos)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TagMutation) EdgeCleared(name string) bool {
	switch name {
	case tag.EdgeMemos:
		return m.clearedmemos
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TagMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Tag unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TagMutation) ResetEdge(name string) error {
	switch name {
	case tag.EdgeMemos:
		m.ResetMemos()
		return nil
	}
	return fmt.Errorf("unknown Tag edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                         Op
	typ                        string
	id                         *uuid.UUID
	create_time                *time.Time
	update_time                *time.Time
	email                      *string
	user_name                  *string
	given_name                 *string
	family_name                *string
	photo_url                  *string
	_type                      *enum.UserType
	clearedFields              map[string]struct{}
	memos                      map[uuid.UUID]struct{}
	removedmemos               map[uuid.UUID]struct{}
	clearedmemos               bool
	subscribing_memos          map[uuid.UUID]struct{}
	removedsubscribing_memos   map[uuid.UUID]struct{}
	clearedsubscribing_memos   bool
	collaborating_memos        map[uuid.UUID]struct{}
	removedcollaborating_memos map[uuid.UUID]struct{}
	clearedcollaborating_memos bool
	subscriptions              map[int]struct{}
	removedsubscriptions       map[int]struct{}
	clearedsubscriptions       bool
	collaborations             map[int]struct{}
	removedcollaborations      map[int]struct{}
	clearedcollaborations      bool
	done                       bool
	oldValue                   func(context.Context) (*User, error)
	predicates                 []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreateTime sets the "create_time" field.
func (m *UserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *UserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *UserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *UserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetUserName sets the "user_name" field.
func (m *UserMutation) SetUserName(s string) {
	m.user_name = &s
}

// UserName returns the value of the "user_name" field in the mutation.
func (m *UserMutation) UserName() (r string, exists bool) {
	v := m.user_name
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old "user_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserName: %w", err)
	}
	return oldValue.UserName, nil
}

// ResetUserName resets all changes to the "user_name" field.
func (m *UserMutation) ResetUserName() {
	m.user_name = nil
}

// SetGivenName sets the "given_name" field.
func (m *UserMutation) SetGivenName(s string) {
	m.given_name = &s
}

// GivenName returns the value of the "given_name" field in the mutation.
func (m *UserMutation) GivenName() (r string, exists bool) {
	v := m.given_name
	if v == nil {
		return
	}
	return *v, true
}

// OldGivenName returns the old "given_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGivenName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGivenName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGivenName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGivenName: %w", err)
	}
	return oldValue.GivenName, nil
}

// ClearGivenName clears the value of the "given_name" field.
func (m *UserMutation) ClearGivenName() {
	m.given_name = nil
	m.clearedFields[user.FieldGivenName] = struct{}{}
}

// GivenNameCleared returns if the "given_name" field was cleared in this mutation.
func (m *UserMutation) GivenNameCleared() bool {
	_, ok := m.clearedFields[user.FieldGivenName]
	return ok
}

// ResetGivenName resets all changes to the "given_name" field.
func (m *UserMutation) ResetGivenName() {
	m.given_name = nil
	delete(m.clearedFields, user.FieldGivenName)
}

// SetFamilyName sets the "family_name" field.
func (m *UserMutation) SetFamilyName(s string) {
	m.family_name = &s
}

// FamilyName returns the value of the "family_name" field in the mutation.
func (m *UserMutation) FamilyName() (r string, exists bool) {
	v := m.family_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFamilyName returns the old "family_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFamilyName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFamilyName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFamilyName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFamilyName: %w", err)
	}
	return oldValue.FamilyName, nil
}

// ClearFamilyName clears the value of the "family_name" field.
func (m *UserMutation) ClearFamilyName() {
	m.family_name = nil
	m.clearedFields[user.FieldFamilyName] = struct{}{}
}

// FamilyNameCleared returns if the "family_name" field was cleared in this mutation.
func (m *UserMutation) FamilyNameCleared() bool {
	_, ok := m.clearedFields[user.FieldFamilyName]
	return ok
}

// ResetFamilyName resets all changes to the "family_name" field.
func (m *UserMutation) ResetFamilyName() {
	m.family_name = nil
	delete(m.clearedFields, user.FieldFamilyName)
}

// SetPhotoURL sets the "photo_url" field.
func (m *UserMutation) SetPhotoURL(s string) {
	m.photo_url = &s
}

// PhotoURL returns the value of the "photo_url" field in the mutation.
func (m *UserMutation) PhotoURL() (r string, exists bool) {
	v := m.photo_url
	if v == nil {
		return
	}
	return *v, true
}

// OldPhotoURL returns the old "photo_url" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhotoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhotoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhotoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhotoURL: %w", err)
	}
	return oldValue.PhotoURL, nil
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (m *UserMutation) ClearPhotoURL() {
	m.photo_url = nil
	m.clearedFields[user.FieldPhotoURL] = struct{}{}
}

// PhotoURLCleared returns if the "photo_url" field was cleared in this mutation.
func (m *UserMutation) PhotoURLCleared() bool {
	_, ok := m.clearedFields[user.FieldPhotoURL]
	return ok
}

// ResetPhotoURL resets all changes to the "photo_url" field.
func (m *UserMutation) ResetPhotoURL() {
	m.photo_url = nil
	delete(m.clearedFields, user.FieldPhotoURL)
}

// SetType sets the "type" field.
func (m *UserMutation) SetType(et enum.UserType) {
	m._type = &et
}

// GetType returns the value of the "type" field in the mutation.
func (m *UserMutation) GetType() (r enum.UserType, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldType(ctx context.Context) (v enum.UserType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *UserMutation) ResetType() {
	m._type = nil
}

// AddMemoIDs adds the "memos" edge to the Memo entity by ids.
func (m *UserMutation) AddMemoIDs(ids ...uuid.UUID) {
	if m.memos == nil {
		m.memos = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.memos[ids[i]] = struct{}{}
	}
}

// ClearMemos clears the "memos" edge to the Memo entity.
func (m *UserMutation) ClearMemos() {
	m.clearedmemos = true
}

// MemosCleared reports if the "memos" edge to the Memo entity was cleared.
func (m *UserMutation) MemosCleared() bool {
	return m.clearedmemos
}

// RemoveMemoIDs removes the "memos" edge to the Memo entity by IDs.
func (m *UserMutation) RemoveMemoIDs(ids ...uuid.UUID) {
	if m.removedmemos == nil {
		m.removedmemos = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.memos, ids[i])
		m.removedmemos[ids[i]] = struct{}{}
	}
}

// RemovedMemos returns the removed IDs of the "memos" edge to the Memo entity.
func (m *UserMutation) RemovedMemosIDs() (ids []uuid.UUID) {
	for id := range m.removedmemos {
		ids = append(ids, id)
	}
	return
}

// MemosIDs returns the "memos" edge IDs in the mutation.
func (m *UserMutation) MemosIDs() (ids []uuid.UUID) {
	for id := range m.memos {
		ids = append(ids, id)
	}
	return
}

// ResetMemos resets all changes to the "memos" edge.
func (m *UserMutation) ResetMemos() {
	m.memos = nil
	m.clearedmemos = false
	m.removedmemos = nil
}

// AddSubscribingMemoIDs adds the "subscribing_memos" edge to the Memo entity by ids.
func (m *UserMutation) AddSubscribingMemoIDs(ids ...uuid.UUID) {
	if m.subscribing_memos == nil {
		m.subscribing_memos = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.subscribing_memos[ids[i]] = struct{}{}
	}
}

// ClearSubscribingMemos clears the "subscribing_memos" edge to the Memo entity.
func (m *UserMutation) ClearSubscribingMemos() {
	m.clearedsubscribing_memos = true
}

// SubscribingMemosCleared reports if the "subscribing_memos" edge to the Memo entity was cleared.
func (m *UserMutation) SubscribingMemosCleared() bool {
	return m.clearedsubscribing_memos
}

// RemoveSubscribingMemoIDs removes the "subscribing_memos" edge to the Memo entity by IDs.
func (m *UserMutation) RemoveSubscribingMemoIDs(ids ...uuid.UUID) {
	if m.removedsubscribing_memos == nil {
		m.removedsubscribing_memos = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.subscribing_memos, ids[i])
		m.removedsubscribing_memos[ids[i]] = struct{}{}
	}
}

// RemovedSubscribingMemos returns the removed IDs of the "subscribing_memos" edge to the Memo entity.
func (m *UserMutation) RemovedSubscribingMemosIDs() (ids []uuid.UUID) {
	for id := range m.removedsubscribing_memos {
		ids = append(ids, id)
	}
	return
}

// SubscribingMemosIDs returns the "subscribing_memos" edge IDs in the mutation.
func (m *UserMutation) SubscribingMemosIDs() (ids []uuid.UUID) {
	for id := range m.subscribing_memos {
		ids = append(ids, id)
	}
	return
}

// ResetSubscribingMemos resets all changes to the "subscribing_memos" edge.
func (m *UserMutation) ResetSubscribingMemos() {
	m.subscribing_memos = nil
	m.clearedsubscribing_memos = false
	m.removedsubscribing_memos = nil
}

// AddCollaboratingMemoIDs adds the "collaborating_memos" edge to the Memo entity by ids.
func (m *UserMutation) AddCollaboratingMemoIDs(ids ...uuid.UUID) {
	if m.collaborating_memos == nil {
		m.collaborating_memos = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.collaborating_memos[ids[i]] = struct{}{}
	}
}

// ClearCollaboratingMemos clears the "collaborating_memos" edge to the Memo entity.
func (m *UserMutation) ClearCollaboratingMemos() {
	m.clearedcollaborating_memos = true
}

// CollaboratingMemosCleared reports if the "collaborating_memos" edge to the Memo entity was cleared.
func (m *UserMutation) CollaboratingMemosCleared() bool {
	return m.clearedcollaborating_memos
}

// RemoveCollaboratingMemoIDs removes the "collaborating_memos" edge to the Memo entity by IDs.
func (m *UserMutation) RemoveCollaboratingMemoIDs(ids ...uuid.UUID) {
	if m.removedcollaborating_memos == nil {
		m.removedcollaborating_memos = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.collaborating_memos, ids[i])
		m.removedcollaborating_memos[ids[i]] = struct{}{}
	}
}

// RemovedCollaboratingMemos returns the removed IDs of the "collaborating_memos" edge to the Memo entity.
func (m *UserMutation) RemovedCollaboratingMemosIDs() (ids []uuid.UUID) {
	for id := range m.removedcollaborating_memos {
		ids = append(ids, id)
	}
	return
}

// CollaboratingMemosIDs returns the "collaborating_memos" edge IDs in the mutation.
func (m *UserMutation) CollaboratingMemosIDs() (ids []uuid.UUID) {
	for id := range m.collaborating_memos {
		ids = append(ids, id)
	}
	return
}

// ResetCollaboratingMemos resets all changes to the "collaborating_memos" edge.
func (m *UserMutation) ResetCollaboratingMemos() {
	m.collaborating_memos = nil
	m.clearedcollaborating_memos = false
	m.removedcollaborating_memos = nil
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by ids.
func (m *UserMutation) AddSubscriptionIDs(ids ...int) {
	if m.subscriptions == nil {
		m.subscriptions = make(map[int]struct{})
	}
	for i := range ids {
		m.subscriptions[ids[i]] = struct{}{}
	}
}

// ClearSubscriptions clears the "subscriptions" edge to the Subscription entity.
func (m *UserMutation) ClearSubscriptions() {
	m.clearedsubscriptions = true
}

// SubscriptionsCleared reports if the "subscriptions" edge to the Subscription entity was cleared.
func (m *UserMutation) SubscriptionsCleared() bool {
	return m.clearedsubscriptions
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to the Subscription entity by IDs.
func (m *UserMutation) RemoveSubscriptionIDs(ids ...int) {
	if m.removedsubscriptions == nil {
		m.removedsubscriptions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.subscriptions, ids[i])
		m.removedsubscriptions[ids[i]] = struct{}{}
	}
}

// RemovedSubscriptions returns the removed IDs of the "subscriptions" edge to the Subscription entity.
func (m *UserMutation) RemovedSubscriptionsIDs() (ids []int) {
	for id := range m.removedsubscriptions {
		ids = append(ids, id)
	}
	return
}

// SubscriptionsIDs returns the "subscriptions" edge IDs in the mutation.
func (m *UserMutation) SubscriptionsIDs() (ids []int) {
	for id := range m.subscriptions {
		ids = append(ids, id)
	}
	return
}

// ResetSubscriptions resets all changes to the "subscriptions" edge.
func (m *UserMutation) ResetSubscriptions() {
	m.subscriptions = nil
	m.clearedsubscriptions = false
	m.removedsubscriptions = nil
}

// AddCollaborationIDs adds the "collaborations" edge to the Collaboration entity by ids.
func (m *UserMutation) AddCollaborationIDs(ids ...int) {
	if m.collaborations == nil {
		m.collaborations = make(map[int]struct{})
	}
	for i := range ids {
		m.collaborations[ids[i]] = struct{}{}
	}
}

// ClearCollaborations clears the "collaborations" edge to the Collaboration entity.
func (m *UserMutation) ClearCollaborations() {
	m.clearedcollaborations = true
}

// CollaborationsCleared reports if the "collaborations" edge to the Collaboration entity was cleared.
func (m *UserMutation) CollaborationsCleared() bool {
	return m.clearedcollaborations
}

// RemoveCollaborationIDs removes the "collaborations" edge to the Collaboration entity by IDs.
func (m *UserMutation) RemoveCollaborationIDs(ids ...int) {
	if m.removedcollaborations == nil {
		m.removedcollaborations = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.collaborations, ids[i])
		m.removedcollaborations[ids[i]] = struct{}{}
	}
}

// RemovedCollaborations returns the removed IDs of the "collaborations" edge to the Collaboration entity.
func (m *UserMutation) RemovedCollaborationsIDs() (ids []int) {
	for id := range m.removedcollaborations {
		ids = append(ids, id)
	}
	return
}

// CollaborationsIDs returns the "collaborations" edge IDs in the mutation.
func (m *UserMutation) CollaborationsIDs() (ids []int) {
	for id := range m.collaborations {
		ids = append(ids, id)
	}
	return
}

// ResetCollaborations resets all changes to the "collaborations" edge.
func (m *UserMutation) ResetCollaborations() {
	m.collaborations = nil
	m.clearedcollaborations = false
	m.removedcollaborations = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, user.FieldUpdateTime)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.user_name != nil {
		fields = append(fields, user.FieldUserName)
	}
	if m.given_name != nil {
		fields = append(fields, user.FieldGivenName)
	}
	if m.family_name != nil {
		fields = append(fields, user.FieldFamilyName)
	}
	if m.photo_url != nil {
		fields = append(fields, user.FieldPhotoURL)
	}
	if m._type != nil {
		fields = append(fields, user.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldUpdateTime:
		return m.UpdateTime()
	case user.FieldEmail:
		return m.Email()
	case user.FieldUserName:
		return m.UserName()
	case user.FieldGivenName:
		return m.GivenName()
	case user.FieldFamilyName:
		return m.FamilyName()
	case user.FieldPhotoURL:
		return m.PhotoURL()
	case user.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldUserName:
		return m.OldUserName(ctx)
	case user.FieldGivenName:
		return m.OldGivenName(ctx)
	case user.FieldFamilyName:
		return m.OldFamilyName(ctx)
	case user.FieldPhotoURL:
		return m.OldPhotoURL(ctx)
	case user.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case user.FieldGivenName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGivenName(v)
		return nil
	case user.FieldFamilyName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFamilyName(v)
		return nil
	case user.FieldPhotoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhotoURL(v)
		return nil
	case user.FieldType:
		v, ok := value.(enum.UserType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldGivenName) {
		fields = append(fields, user.FieldGivenName)
	}
	if m.FieldCleared(user.FieldFamilyName) {
		fields = append(fields, user.FieldFamilyName)
	}
	if m.FieldCleared(user.FieldPhotoURL) {
		fields = append(fields, user.FieldPhotoURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldGivenName:
		m.ClearGivenName()
		return nil
	case user.FieldFamilyName:
		m.ClearFamilyName()
		return nil
	case user.FieldPhotoURL:
		m.ClearPhotoURL()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldUserName:
		m.ResetUserName()
		return nil
	case user.FieldGivenName:
		m.ResetGivenName()
		return nil
	case user.FieldFamilyName:
		m.ResetFamilyName()
		return nil
	case user.FieldPhotoURL:
		m.ResetPhotoURL()
		return nil
	case user.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.memos != nil {
		edges = append(edges, user.EdgeMemos)
	}
	if m.subscribing_memos != nil {
		edges = append(edges, user.EdgeSubscribingMemos)
	}
	if m.collaborating_memos != nil {
		edges = append(edges, user.EdgeCollaboratingMemos)
	}
	if m.subscriptions != nil {
		edges = append(edges, user.EdgeSubscriptions)
	}
	if m.collaborations != nil {
		edges = append(edges, user.EdgeCollaborations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeMemos:
		ids := make([]ent.Value, 0, len(m.memos))
		for id := range m.memos {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSubscribingMemos:
		ids := make([]ent.Value, 0, len(m.subscribing_memos))
		for id := range m.subscribing_memos {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCollaboratingMemos:
		ids := make([]ent.Value, 0, len(m.collaborating_memos))
		for id := range m.collaborating_memos {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSubscriptions:
		ids := make([]ent.Value, 0, len(m.subscriptions))
		for id := range m.subscriptions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCollaborations:
		ids := make([]ent.Value, 0, len(m.collaborations))
		for id := range m.collaborations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedmemos != nil {
		edges = append(edges, user.EdgeMemos)
	}
	if m.removedsubscribing_memos != nil {
		edges = append(edges, user.EdgeSubscribingMemos)
	}
	if m.removedcollaborating_memos != nil {
		edges = append(edges, user.EdgeCollaboratingMemos)
	}
	if m.removedsubscriptions != nil {
		edges = append(edges, user.EdgeSubscriptions)
	}
	if m.removedcollaborations != nil {
		edges = append(edges, user.EdgeCollaborations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeMemos:
		ids := make([]ent.Value, 0, len(m.removedmemos))
		for id := range m.removedmemos {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSubscribingMemos:
		ids := make([]ent.Value, 0, len(m.removedsubscribing_memos))
		for id := range m.removedsubscribing_memos {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCollaboratingMemos:
		ids := make([]ent.Value, 0, len(m.removedcollaborating_memos))
		for id := range m.removedcollaborating_memos {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSubscriptions:
		ids := make([]ent.Value, 0, len(m.removedsubscriptions))
		for id := range m.removedsubscriptions {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeCollaborations:
		ids := make([]ent.Value, 0, len(m.removedcollaborations))
		for id := range m.removedcollaborations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedmemos {
		edges = append(edges, user.EdgeMemos)
	}
	if m.clearedsubscribing_memos {
		edges = append(edges, user.EdgeSubscribingMemos)
	}
	if m.clearedcollaborating_memos {
		edges = append(edges, user.EdgeCollaboratingMemos)
	}
	if m.clearedsubscriptions {
		edges = append(edges, user.EdgeSubscriptions)
	}
	if m.clearedcollaborations {
		edges = append(edges, user.EdgeCollaborations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeMemos:
		return m.clearedmemos
	case user.EdgeSubscribingMemos:
		return m.clearedsubscribing_memos
	case user.EdgeCollaboratingMemos:
		return m.clearedcollaborating_memos
	case user.EdgeSubscriptions:
		return m.clearedsubscriptions
	case user.EdgeCollaborations:
		return m.clearedcollaborations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeMemos:
		m.ResetMemos()
		return nil
	case user.EdgeSubscribingMemos:
		m.ResetSubscribingMemos()
		return nil
	case user.EdgeCollaboratingMemos:
		m.ResetCollaboratingMemos()
		return nil
	case user.EdgeSubscriptions:
		m.ResetSubscriptions()
		return nil
	case user.EdgeCollaborations:
		m.ResetCollaborations()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
