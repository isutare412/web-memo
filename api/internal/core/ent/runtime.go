// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"github.com/isutare412/tasks/api/internal/core/ent/schema"
	"github.com/isutare412/tasks/api/internal/core/ent/task"
	"github.com/isutare412/tasks/api/internal/core/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	taskMixin := schema.Task{}.Mixin()
	taskMixinFields0 := taskMixin[0].Fields()
	_ = taskMixinFields0
	taskFields := schema.Task{}.Fields()
	_ = taskFields
	// taskDescCreateTime is the schema descriptor for create_time field.
	taskDescCreateTime := taskMixinFields0[0].Descriptor()
	// task.DefaultCreateTime holds the default value on creation for the create_time field.
	task.DefaultCreateTime = taskDescCreateTime.Default.(func() time.Time)
	// taskDescUpdateTime is the schema descriptor for update_time field.
	taskDescUpdateTime := taskMixinFields0[1].Descriptor()
	// task.DefaultUpdateTime holds the default value on creation for the update_time field.
	task.DefaultUpdateTime = taskDescUpdateTime.Default.(func() time.Time)
	// task.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	task.UpdateDefaultUpdateTime = taskDescUpdateTime.UpdateDefault.(func() time.Time)
	// taskDescTag is the schema descriptor for tag field.
	taskDescTag := taskFields[1].Descriptor()
	// task.DefaultTag holds the default value on creation for the tag field.
	task.DefaultTag = taskDescTag.Default.(string)
	// task.TagValidator is a validator for the "tag" field. It is called by the builders before save.
	task.TagValidator = func() func(string) error {
		validators := taskDescTag.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(tag string) error {
			for _, fn := range fns {
				if err := fn(tag); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// taskDescContent is the schema descriptor for content field.
	taskDescContent := taskFields[2].Descriptor()
	// task.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	task.ContentValidator = taskDescContent.Validators[0].(func(string) error)
	// taskDescID is the schema descriptor for id field.
	taskDescID := taskFields[0].Descriptor()
	// task.DefaultID holds the default value on creation for the id field.
	task.DefaultID = taskDescID.Default.(func() uuid.UUID)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields0[0].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields0[1].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescUserName is the schema descriptor for user_name field.
	userDescUserName := userFields[2].Descriptor()
	// user.UserNameValidator is a validator for the "user_name" field. It is called by the builders before save.
	user.UserNameValidator = func() func(string) error {
		validators := userDescUserName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(user_name string) error {
			for _, fn := range fns {
				if err := fn(user_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescGivenName is the schema descriptor for given_name field.
	userDescGivenName := userFields[3].Descriptor()
	// user.GivenNameValidator is a validator for the "given_name" field. It is called by the builders before save.
	user.GivenNameValidator = func() func(string) error {
		validators := userDescGivenName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(given_name string) error {
			for _, fn := range fns {
				if err := fn(given_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescFamilyName is the schema descriptor for family_name field.
	userDescFamilyName := userFields[4].Descriptor()
	// user.FamilyNameValidator is a validator for the "family_name" field. It is called by the builders before save.
	user.FamilyNameValidator = func() func(string) error {
		validators := userDescFamilyName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(family_name string) error {
			for _, fn := range fns {
				if err := fn(family_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPhotoURL is the schema descriptor for photo_url field.
	userDescPhotoURL := userFields[5].Descriptor()
	// user.PhotoURLValidator is a validator for the "photo_url" field. It is called by the builders before save.
	user.PhotoURLValidator = userDescPhotoURL.Validators[0].(func(string) error)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
