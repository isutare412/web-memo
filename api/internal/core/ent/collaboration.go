// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/isutare412/web-memo/api/internal/core/ent/collaboration"
	"github.com/isutare412/web-memo/api/internal/core/ent/memo"
	"github.com/isutare412/web-memo/api/internal/core/ent/user"
)

// Collaboration is the model entity for the Collaboration schema.
type Collaboration struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// MemoID holds the value of the "memo_id" field.
	MemoID uuid.UUID `json:"memo_id,omitempty"`
	// Approved holds the value of the "approved" field.
	Approved bool `json:"approved,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CollaborationQuery when eager-loading is set.
	Edges        CollaborationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CollaborationEdges holds the relations/edges for other nodes in the graph.
type CollaborationEdges struct {
	// Collaborator holds the value of the collaborator edge.
	Collaborator *User `json:"collaborator,omitempty"`
	// Memo holds the value of the memo edge.
	Memo *Memo `json:"memo,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CollaboratorOrErr returns the Collaborator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CollaborationEdges) CollaboratorOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Collaborator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Collaborator, nil
	}
	return nil, &NotLoadedError{edge: "collaborator"}
}

// MemoOrErr returns the Memo value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CollaborationEdges) MemoOrErr() (*Memo, error) {
	if e.loadedTypes[1] {
		if e.Memo == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: memo.Label}
		}
		return e.Memo, nil
	}
	return nil, &NotLoadedError{edge: "memo"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Collaboration) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case collaboration.FieldApproved:
			values[i] = new(sql.NullBool)
		case collaboration.FieldID:
			values[i] = new(sql.NullInt64)
		case collaboration.FieldCreateTime, collaboration.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case collaboration.FieldUserID, collaboration.FieldMemoID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Collaboration fields.
func (c *Collaboration) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case collaboration.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case collaboration.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				c.UserID = *value
			}
		case collaboration.FieldMemoID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field memo_id", values[i])
			} else if value != nil {
				c.MemoID = *value
			}
		case collaboration.FieldApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field approved", values[i])
			} else if value.Valid {
				c.Approved = value.Bool
			}
		case collaboration.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				c.CreateTime = value.Time
			}
		case collaboration.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				c.UpdateTime = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Collaboration.
// This includes values selected through modifiers, order, etc.
func (c *Collaboration) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryCollaborator queries the "collaborator" edge of the Collaboration entity.
func (c *Collaboration) QueryCollaborator() *UserQuery {
	return NewCollaborationClient(c.config).QueryCollaborator(c)
}

// QueryMemo queries the "memo" edge of the Collaboration entity.
func (c *Collaboration) QueryMemo() *MemoQuery {
	return NewCollaborationClient(c.config).QueryMemo(c)
}

// Update returns a builder for updating this Collaboration.
// Note that you need to call Collaboration.Unwrap() before calling this method if this Collaboration
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Collaboration) Update() *CollaborationUpdateOne {
	return NewCollaborationClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Collaboration entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Collaboration) Unwrap() *Collaboration {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Collaboration is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Collaboration) String() string {
	var builder strings.Builder
	builder.WriteString("Collaboration(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", c.UserID))
	builder.WriteString(", ")
	builder.WriteString("memo_id=")
	builder.WriteString(fmt.Sprintf("%v", c.MemoID))
	builder.WriteString(", ")
	builder.WriteString("approved=")
	builder.WriteString(fmt.Sprintf("%v", c.Approved))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(c.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(c.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Collaborations is a parsable slice of Collaboration.
type Collaborations []*Collaboration
