// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/isutare412/web-memo/api/internal/core/ent/collaboration"
	"github.com/isutare412/web-memo/api/internal/core/ent/memo"
	"github.com/isutare412/web-memo/api/internal/core/ent/predicate"
	"github.com/isutare412/web-memo/api/internal/core/ent/subscription"
	"github.com/isutare412/web-memo/api/internal/core/ent/tag"
	"github.com/isutare412/web-memo/api/internal/core/ent/user"
)

// MemoUpdate is the builder for updating Memo entities.
type MemoUpdate struct {
	config
	hooks    []Hook
	mutation *MemoMutation
}

// Where appends a list predicates to the MemoUpdate builder.
func (mu *MemoUpdate) Where(ps ...predicate.Memo) *MemoUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetOwnerID sets the "owner_id" field.
func (mu *MemoUpdate) SetOwnerID(u uuid.UUID) *MemoUpdate {
	mu.mutation.SetOwnerID(u)
	return mu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (mu *MemoUpdate) SetNillableOwnerID(u *uuid.UUID) *MemoUpdate {
	if u != nil {
		mu.SetOwnerID(*u)
	}
	return mu
}

// SetTitle sets the "title" field.
func (mu *MemoUpdate) SetTitle(s string) *MemoUpdate {
	mu.mutation.SetTitle(s)
	return mu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mu *MemoUpdate) SetNillableTitle(s *string) *MemoUpdate {
	if s != nil {
		mu.SetTitle(*s)
	}
	return mu
}

// SetContent sets the "content" field.
func (mu *MemoUpdate) SetContent(s string) *MemoUpdate {
	mu.mutation.SetContent(s)
	return mu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (mu *MemoUpdate) SetNillableContent(s *string) *MemoUpdate {
	if s != nil {
		mu.SetContent(*s)
	}
	return mu
}

// SetIsPublished sets the "is_published" field.
func (mu *MemoUpdate) SetIsPublished(b bool) *MemoUpdate {
	mu.mutation.SetIsPublished(b)
	return mu
}

// SetNillableIsPublished sets the "is_published" field if the given value is not nil.
func (mu *MemoUpdate) SetNillableIsPublished(b *bool) *MemoUpdate {
	if b != nil {
		mu.SetIsPublished(*b)
	}
	return mu
}

// SetUpdateTime sets the "update_time" field.
func (mu *MemoUpdate) SetUpdateTime(t time.Time) *MemoUpdate {
	mu.mutation.SetUpdateTime(t)
	return mu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (mu *MemoUpdate) SetNillableUpdateTime(t *time.Time) *MemoUpdate {
	if t != nil {
		mu.SetUpdateTime(*t)
	}
	return mu
}

// SetOwner sets the "owner" edge to the User entity.
func (mu *MemoUpdate) SetOwner(u *User) *MemoUpdate {
	return mu.SetOwnerID(u.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (mu *MemoUpdate) AddTagIDs(ids ...int) *MemoUpdate {
	mu.mutation.AddTagIDs(ids...)
	return mu
}

// AddTags adds the "tags" edges to the Tag entity.
func (mu *MemoUpdate) AddTags(t ...*Tag) *MemoUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.AddTagIDs(ids...)
}

// AddSubscriberIDs adds the "subscribers" edge to the User entity by IDs.
func (mu *MemoUpdate) AddSubscriberIDs(ids ...uuid.UUID) *MemoUpdate {
	mu.mutation.AddSubscriberIDs(ids...)
	return mu
}

// AddSubscribers adds the "subscribers" edges to the User entity.
func (mu *MemoUpdate) AddSubscribers(u ...*User) *MemoUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.AddSubscriberIDs(ids...)
}

// AddCollaboratorIDs adds the "collaborators" edge to the User entity by IDs.
func (mu *MemoUpdate) AddCollaboratorIDs(ids ...uuid.UUID) *MemoUpdate {
	mu.mutation.AddCollaboratorIDs(ids...)
	return mu
}

// AddCollaborators adds the "collaborators" edges to the User entity.
func (mu *MemoUpdate) AddCollaborators(u ...*User) *MemoUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.AddCollaboratorIDs(ids...)
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by IDs.
func (mu *MemoUpdate) AddSubscriptionIDs(ids ...int) *MemoUpdate {
	mu.mutation.AddSubscriptionIDs(ids...)
	return mu
}

// AddSubscriptions adds the "subscriptions" edges to the Subscription entity.
func (mu *MemoUpdate) AddSubscriptions(s ...*Subscription) *MemoUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mu.AddSubscriptionIDs(ids...)
}

// AddCollaborationIDs adds the "collaborations" edge to the Collaboration entity by IDs.
func (mu *MemoUpdate) AddCollaborationIDs(ids ...int) *MemoUpdate {
	mu.mutation.AddCollaborationIDs(ids...)
	return mu
}

// AddCollaborations adds the "collaborations" edges to the Collaboration entity.
func (mu *MemoUpdate) AddCollaborations(c ...*Collaboration) *MemoUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.AddCollaborationIDs(ids...)
}

// Mutation returns the MemoMutation object of the builder.
func (mu *MemoUpdate) Mutation() *MemoMutation {
	return mu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (mu *MemoUpdate) ClearOwner() *MemoUpdate {
	mu.mutation.ClearOwner()
	return mu
}

// ClearTags clears all "tags" edges to the Tag entity.
func (mu *MemoUpdate) ClearTags() *MemoUpdate {
	mu.mutation.ClearTags()
	return mu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (mu *MemoUpdate) RemoveTagIDs(ids ...int) *MemoUpdate {
	mu.mutation.RemoveTagIDs(ids...)
	return mu
}

// RemoveTags removes "tags" edges to Tag entities.
func (mu *MemoUpdate) RemoveTags(t ...*Tag) *MemoUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return mu.RemoveTagIDs(ids...)
}

// ClearSubscribers clears all "subscribers" edges to the User entity.
func (mu *MemoUpdate) ClearSubscribers() *MemoUpdate {
	mu.mutation.ClearSubscribers()
	return mu
}

// RemoveSubscriberIDs removes the "subscribers" edge to User entities by IDs.
func (mu *MemoUpdate) RemoveSubscriberIDs(ids ...uuid.UUID) *MemoUpdate {
	mu.mutation.RemoveSubscriberIDs(ids...)
	return mu
}

// RemoveSubscribers removes "subscribers" edges to User entities.
func (mu *MemoUpdate) RemoveSubscribers(u ...*User) *MemoUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.RemoveSubscriberIDs(ids...)
}

// ClearCollaborators clears all "collaborators" edges to the User entity.
func (mu *MemoUpdate) ClearCollaborators() *MemoUpdate {
	mu.mutation.ClearCollaborators()
	return mu
}

// RemoveCollaboratorIDs removes the "collaborators" edge to User entities by IDs.
func (mu *MemoUpdate) RemoveCollaboratorIDs(ids ...uuid.UUID) *MemoUpdate {
	mu.mutation.RemoveCollaboratorIDs(ids...)
	return mu
}

// RemoveCollaborators removes "collaborators" edges to User entities.
func (mu *MemoUpdate) RemoveCollaborators(u ...*User) *MemoUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return mu.RemoveCollaboratorIDs(ids...)
}

// ClearSubscriptions clears all "subscriptions" edges to the Subscription entity.
func (mu *MemoUpdate) ClearSubscriptions() *MemoUpdate {
	mu.mutation.ClearSubscriptions()
	return mu
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to Subscription entities by IDs.
func (mu *MemoUpdate) RemoveSubscriptionIDs(ids ...int) *MemoUpdate {
	mu.mutation.RemoveSubscriptionIDs(ids...)
	return mu
}

// RemoveSubscriptions removes "subscriptions" edges to Subscription entities.
func (mu *MemoUpdate) RemoveSubscriptions(s ...*Subscription) *MemoUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return mu.RemoveSubscriptionIDs(ids...)
}

// ClearCollaborations clears all "collaborations" edges to the Collaboration entity.
func (mu *MemoUpdate) ClearCollaborations() *MemoUpdate {
	mu.mutation.ClearCollaborations()
	return mu
}

// RemoveCollaborationIDs removes the "collaborations" edge to Collaboration entities by IDs.
func (mu *MemoUpdate) RemoveCollaborationIDs(ids ...int) *MemoUpdate {
	mu.mutation.RemoveCollaborationIDs(ids...)
	return mu
}

// RemoveCollaborations removes "collaborations" edges to Collaboration entities.
func (mu *MemoUpdate) RemoveCollaborations(c ...*Collaboration) *MemoUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.RemoveCollaborationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MemoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MemoUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MemoUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MemoUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MemoUpdate) check() error {
	if v, ok := mu.mutation.Title(); ok {
		if err := memo.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Memo.title": %w`, err)}
		}
	}
	if v, ok := mu.mutation.Content(); ok {
		if err := memo.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Memo.content": %w`, err)}
		}
	}
	if _, ok := mu.mutation.OwnerID(); mu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Memo.owner"`)
	}
	return nil
}

func (mu *MemoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(memo.Table, memo.Columns, sqlgraph.NewFieldSpec(memo.FieldID, field.TypeUUID))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Title(); ok {
		_spec.SetField(memo.FieldTitle, field.TypeString, value)
	}
	if value, ok := mu.mutation.Content(); ok {
		_spec.SetField(memo.FieldContent, field.TypeString, value)
	}
	if value, ok := mu.mutation.IsPublished(); ok {
		_spec.SetField(memo.FieldIsPublished, field.TypeBool, value)
	}
	if value, ok := mu.mutation.UpdateTime(); ok {
		_spec.SetField(memo.FieldUpdateTime, field.TypeTime, value)
	}
	if mu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memo.OwnerTable,
			Columns: []string{memo.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memo.OwnerTable,
			Columns: []string{memo.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   memo.TagsTable,
			Columns: memo.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !mu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   memo.TagsTable,
			Columns: memo.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   memo.TagsTable,
			Columns: memo.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   memo.SubscribersTable,
			Columns: memo.SubscribersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		createE := &SubscriptionCreate{config: mu.config, mutation: newSubscriptionMutation(mu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedSubscribersIDs(); len(nodes) > 0 && !mu.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   memo.SubscribersTable,
			Columns: memo.SubscribersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SubscriptionCreate{config: mu.config, mutation: newSubscriptionMutation(mu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.SubscribersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   memo.SubscribersTable,
			Columns: memo.SubscribersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SubscriptionCreate{config: mu.config, mutation: newSubscriptionMutation(mu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.CollaboratorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   memo.CollaboratorsTable,
			Columns: memo.CollaboratorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		createE := &CollaborationCreate{config: mu.config, mutation: newCollaborationMutation(mu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedCollaboratorsIDs(); len(nodes) > 0 && !mu.mutation.CollaboratorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   memo.CollaboratorsTable,
			Columns: memo.CollaboratorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &CollaborationCreate{config: mu.config, mutation: newCollaborationMutation(mu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.CollaboratorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   memo.CollaboratorsTable,
			Columns: memo.CollaboratorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &CollaborationCreate{config: mu.config, mutation: newCollaborationMutation(mu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memo.SubscriptionsTable,
			Columns: []string{memo.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedSubscriptionsIDs(); len(nodes) > 0 && !mu.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memo.SubscriptionsTable,
			Columns: []string{memo.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memo.SubscriptionsTable,
			Columns: []string{memo.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.CollaborationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memo.CollaborationsTable,
			Columns: []string{memo.CollaborationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collaboration.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedCollaborationsIDs(); len(nodes) > 0 && !mu.mutation.CollaborationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memo.CollaborationsTable,
			Columns: []string{memo.CollaborationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collaboration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.CollaborationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memo.CollaborationsTable,
			Columns: []string{memo.CollaborationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collaboration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MemoUpdateOne is the builder for updating a single Memo entity.
type MemoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemoMutation
}

// SetOwnerID sets the "owner_id" field.
func (muo *MemoUpdateOne) SetOwnerID(u uuid.UUID) *MemoUpdateOne {
	muo.mutation.SetOwnerID(u)
	return muo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (muo *MemoUpdateOne) SetNillableOwnerID(u *uuid.UUID) *MemoUpdateOne {
	if u != nil {
		muo.SetOwnerID(*u)
	}
	return muo
}

// SetTitle sets the "title" field.
func (muo *MemoUpdateOne) SetTitle(s string) *MemoUpdateOne {
	muo.mutation.SetTitle(s)
	return muo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (muo *MemoUpdateOne) SetNillableTitle(s *string) *MemoUpdateOne {
	if s != nil {
		muo.SetTitle(*s)
	}
	return muo
}

// SetContent sets the "content" field.
func (muo *MemoUpdateOne) SetContent(s string) *MemoUpdateOne {
	muo.mutation.SetContent(s)
	return muo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (muo *MemoUpdateOne) SetNillableContent(s *string) *MemoUpdateOne {
	if s != nil {
		muo.SetContent(*s)
	}
	return muo
}

// SetIsPublished sets the "is_published" field.
func (muo *MemoUpdateOne) SetIsPublished(b bool) *MemoUpdateOne {
	muo.mutation.SetIsPublished(b)
	return muo
}

// SetNillableIsPublished sets the "is_published" field if the given value is not nil.
func (muo *MemoUpdateOne) SetNillableIsPublished(b *bool) *MemoUpdateOne {
	if b != nil {
		muo.SetIsPublished(*b)
	}
	return muo
}

// SetUpdateTime sets the "update_time" field.
func (muo *MemoUpdateOne) SetUpdateTime(t time.Time) *MemoUpdateOne {
	muo.mutation.SetUpdateTime(t)
	return muo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (muo *MemoUpdateOne) SetNillableUpdateTime(t *time.Time) *MemoUpdateOne {
	if t != nil {
		muo.SetUpdateTime(*t)
	}
	return muo
}

// SetOwner sets the "owner" edge to the User entity.
func (muo *MemoUpdateOne) SetOwner(u *User) *MemoUpdateOne {
	return muo.SetOwnerID(u.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (muo *MemoUpdateOne) AddTagIDs(ids ...int) *MemoUpdateOne {
	muo.mutation.AddTagIDs(ids...)
	return muo
}

// AddTags adds the "tags" edges to the Tag entity.
func (muo *MemoUpdateOne) AddTags(t ...*Tag) *MemoUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.AddTagIDs(ids...)
}

// AddSubscriberIDs adds the "subscribers" edge to the User entity by IDs.
func (muo *MemoUpdateOne) AddSubscriberIDs(ids ...uuid.UUID) *MemoUpdateOne {
	muo.mutation.AddSubscriberIDs(ids...)
	return muo
}

// AddSubscribers adds the "subscribers" edges to the User entity.
func (muo *MemoUpdateOne) AddSubscribers(u ...*User) *MemoUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.AddSubscriberIDs(ids...)
}

// AddCollaboratorIDs adds the "collaborators" edge to the User entity by IDs.
func (muo *MemoUpdateOne) AddCollaboratorIDs(ids ...uuid.UUID) *MemoUpdateOne {
	muo.mutation.AddCollaboratorIDs(ids...)
	return muo
}

// AddCollaborators adds the "collaborators" edges to the User entity.
func (muo *MemoUpdateOne) AddCollaborators(u ...*User) *MemoUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.AddCollaboratorIDs(ids...)
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by IDs.
func (muo *MemoUpdateOne) AddSubscriptionIDs(ids ...int) *MemoUpdateOne {
	muo.mutation.AddSubscriptionIDs(ids...)
	return muo
}

// AddSubscriptions adds the "subscriptions" edges to the Subscription entity.
func (muo *MemoUpdateOne) AddSubscriptions(s ...*Subscription) *MemoUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return muo.AddSubscriptionIDs(ids...)
}

// AddCollaborationIDs adds the "collaborations" edge to the Collaboration entity by IDs.
func (muo *MemoUpdateOne) AddCollaborationIDs(ids ...int) *MemoUpdateOne {
	muo.mutation.AddCollaborationIDs(ids...)
	return muo
}

// AddCollaborations adds the "collaborations" edges to the Collaboration entity.
func (muo *MemoUpdateOne) AddCollaborations(c ...*Collaboration) *MemoUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.AddCollaborationIDs(ids...)
}

// Mutation returns the MemoMutation object of the builder.
func (muo *MemoUpdateOne) Mutation() *MemoMutation {
	return muo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (muo *MemoUpdateOne) ClearOwner() *MemoUpdateOne {
	muo.mutation.ClearOwner()
	return muo
}

// ClearTags clears all "tags" edges to the Tag entity.
func (muo *MemoUpdateOne) ClearTags() *MemoUpdateOne {
	muo.mutation.ClearTags()
	return muo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (muo *MemoUpdateOne) RemoveTagIDs(ids ...int) *MemoUpdateOne {
	muo.mutation.RemoveTagIDs(ids...)
	return muo
}

// RemoveTags removes "tags" edges to Tag entities.
func (muo *MemoUpdateOne) RemoveTags(t ...*Tag) *MemoUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return muo.RemoveTagIDs(ids...)
}

// ClearSubscribers clears all "subscribers" edges to the User entity.
func (muo *MemoUpdateOne) ClearSubscribers() *MemoUpdateOne {
	muo.mutation.ClearSubscribers()
	return muo
}

// RemoveSubscriberIDs removes the "subscribers" edge to User entities by IDs.
func (muo *MemoUpdateOne) RemoveSubscriberIDs(ids ...uuid.UUID) *MemoUpdateOne {
	muo.mutation.RemoveSubscriberIDs(ids...)
	return muo
}

// RemoveSubscribers removes "subscribers" edges to User entities.
func (muo *MemoUpdateOne) RemoveSubscribers(u ...*User) *MemoUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.RemoveSubscriberIDs(ids...)
}

// ClearCollaborators clears all "collaborators" edges to the User entity.
func (muo *MemoUpdateOne) ClearCollaborators() *MemoUpdateOne {
	muo.mutation.ClearCollaborators()
	return muo
}

// RemoveCollaboratorIDs removes the "collaborators" edge to User entities by IDs.
func (muo *MemoUpdateOne) RemoveCollaboratorIDs(ids ...uuid.UUID) *MemoUpdateOne {
	muo.mutation.RemoveCollaboratorIDs(ids...)
	return muo
}

// RemoveCollaborators removes "collaborators" edges to User entities.
func (muo *MemoUpdateOne) RemoveCollaborators(u ...*User) *MemoUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return muo.RemoveCollaboratorIDs(ids...)
}

// ClearSubscriptions clears all "subscriptions" edges to the Subscription entity.
func (muo *MemoUpdateOne) ClearSubscriptions() *MemoUpdateOne {
	muo.mutation.ClearSubscriptions()
	return muo
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to Subscription entities by IDs.
func (muo *MemoUpdateOne) RemoveSubscriptionIDs(ids ...int) *MemoUpdateOne {
	muo.mutation.RemoveSubscriptionIDs(ids...)
	return muo
}

// RemoveSubscriptions removes "subscriptions" edges to Subscription entities.
func (muo *MemoUpdateOne) RemoveSubscriptions(s ...*Subscription) *MemoUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return muo.RemoveSubscriptionIDs(ids...)
}

// ClearCollaborations clears all "collaborations" edges to the Collaboration entity.
func (muo *MemoUpdateOne) ClearCollaborations() *MemoUpdateOne {
	muo.mutation.ClearCollaborations()
	return muo
}

// RemoveCollaborationIDs removes the "collaborations" edge to Collaboration entities by IDs.
func (muo *MemoUpdateOne) RemoveCollaborationIDs(ids ...int) *MemoUpdateOne {
	muo.mutation.RemoveCollaborationIDs(ids...)
	return muo
}

// RemoveCollaborations removes "collaborations" edges to Collaboration entities.
func (muo *MemoUpdateOne) RemoveCollaborations(c ...*Collaboration) *MemoUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.RemoveCollaborationIDs(ids...)
}

// Where appends a list predicates to the MemoUpdate builder.
func (muo *MemoUpdateOne) Where(ps ...predicate.Memo) *MemoUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MemoUpdateOne) Select(field string, fields ...string) *MemoUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Memo entity.
func (muo *MemoUpdateOne) Save(ctx context.Context) (*Memo, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MemoUpdateOne) SaveX(ctx context.Context) *Memo {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MemoUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MemoUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MemoUpdateOne) check() error {
	if v, ok := muo.mutation.Title(); ok {
		if err := memo.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Memo.title": %w`, err)}
		}
	}
	if v, ok := muo.mutation.Content(); ok {
		if err := memo.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Memo.content": %w`, err)}
		}
	}
	if _, ok := muo.mutation.OwnerID(); muo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Memo.owner"`)
	}
	return nil
}

func (muo *MemoUpdateOne) sqlSave(ctx context.Context) (_node *Memo, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(memo.Table, memo.Columns, sqlgraph.NewFieldSpec(memo.FieldID, field.TypeUUID))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Memo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memo.FieldID)
		for _, f := range fields {
			if !memo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != memo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Title(); ok {
		_spec.SetField(memo.FieldTitle, field.TypeString, value)
	}
	if value, ok := muo.mutation.Content(); ok {
		_spec.SetField(memo.FieldContent, field.TypeString, value)
	}
	if value, ok := muo.mutation.IsPublished(); ok {
		_spec.SetField(memo.FieldIsPublished, field.TypeBool, value)
	}
	if value, ok := muo.mutation.UpdateTime(); ok {
		_spec.SetField(memo.FieldUpdateTime, field.TypeTime, value)
	}
	if muo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memo.OwnerTable,
			Columns: []string{memo.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memo.OwnerTable,
			Columns: []string{memo.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   memo.TagsTable,
			Columns: memo.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !muo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   memo.TagsTable,
			Columns: memo.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   memo.TagsTable,
			Columns: memo.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   memo.SubscribersTable,
			Columns: memo.SubscribersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		createE := &SubscriptionCreate{config: muo.config, mutation: newSubscriptionMutation(muo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedSubscribersIDs(); len(nodes) > 0 && !muo.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   memo.SubscribersTable,
			Columns: memo.SubscribersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SubscriptionCreate{config: muo.config, mutation: newSubscriptionMutation(muo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.SubscribersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   memo.SubscribersTable,
			Columns: memo.SubscribersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &SubscriptionCreate{config: muo.config, mutation: newSubscriptionMutation(muo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.CollaboratorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   memo.CollaboratorsTable,
			Columns: memo.CollaboratorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		createE := &CollaborationCreate{config: muo.config, mutation: newCollaborationMutation(muo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedCollaboratorsIDs(); len(nodes) > 0 && !muo.mutation.CollaboratorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   memo.CollaboratorsTable,
			Columns: memo.CollaboratorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &CollaborationCreate{config: muo.config, mutation: newCollaborationMutation(muo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.CollaboratorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   memo.CollaboratorsTable,
			Columns: memo.CollaboratorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &CollaborationCreate{config: muo.config, mutation: newCollaborationMutation(muo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memo.SubscriptionsTable,
			Columns: []string{memo.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedSubscriptionsIDs(); len(nodes) > 0 && !muo.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memo.SubscriptionsTable,
			Columns: []string{memo.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memo.SubscriptionsTable,
			Columns: []string{memo.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.CollaborationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memo.CollaborationsTable,
			Columns: []string{memo.CollaborationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collaboration.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedCollaborationsIDs(); len(nodes) > 0 && !muo.mutation.CollaborationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memo.CollaborationsTable,
			Columns: []string{memo.CollaborationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collaboration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.CollaborationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   memo.CollaborationsTable,
			Columns: []string{memo.CollaborationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collaboration.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Memo{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
